version: 2.1
orbs:
  gcp-gcr: circleci/gcp-gcr@0.16.2
  pulumi: pulumi/pulumi@2.1.0
  gcp-cli: circleci/gcp-cli@3.1.1
jobs:
  build:
    docker:
      - image: cimg/node:20.12
    steps:
      - checkout
      - restore_cache:
          key: dependency-v3-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Build
          command: npm run build
      - save_cache:
          key: dependency-v3-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - persist_to_workspace:
          root: .
          paths:
            - build
  test:
    resource_class: large
    docker:
      - image: cimg/node:20.12
      - image: postgres:15-alpine
        environment:
          - POSTGRES_DB: api_test
          - POSTGRES_PASSWORD: 12345
      - image: redis:6
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          key: dependency-v3-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Wait for PostgreSQL
          command: |
            for i in `seq 1 10`;
            do
            nc -z localhost 5432 && echo Success && exit 0
            echo -n .
            sleep 1
            done
            echo Failed waiting for Postgress && exit 1
      - run:
          name: Wait for Redis
          command: |
            for i in `seq 1 10`;
            do
            nc -z localhost 6379 && echo Success && exit 0
            echo -n .
            sleep 1
            done
            echo Failed waiting for Redis && exit 1
      - run:
          name: Test
          command: |
            npm run pretest
            TEST=$(./node_modules/.bin/jest --listTests)
            echo $TEST | circleci tests run --command="xargs ./node_modules/.bin/jest --testEnvironment=node --ci --runInBand --reporters=default --reporters=jest-junit --" --split-by=timings
          environment:
            - NODE_OPTIONS: --max-old-space-size=4096
            - JEST_JUNIT_OUTPUT_DIR: ./test-results
      - store_test_results:
          path: ./test-results
  build_and_push_docker:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - attach_workspace:
          at: .
      - gcp-gcr/build-image:
          image: $CIRCLE_PROJECT_REPONAME
          tag: $CIRCLE_SHA1
          registry-url: us.gcr.io
      - gcp-gcr/gcr-auth
      - gcp-gcr/push-image:
          image: $CIRCLE_PROJECT_REPONAME
          tag: $CIRCLE_SHA1
          registry-url: us.gcr.io
  pulumi_preview:
    docker:
      - image: cimg/node:20.12
    steps:
      - checkout
      - pulumi/login
      - run:
          name: Install dependencies
          command: npm i
          working_directory: .infra
      - run:
          name: Pulumi preview
          command: pulumi preview --suppress-outputs --stack dailydotdev/prod -c tag=$CIRCLE_SHA1
          working_directory: .infra
  pulumi_up:
    circleci_ip_ranges: true
    docker:
      - image: cimg/node:20.12
    environment:
      USE_GKE_GCLOUD_AUTH_PLUGIN: 'True'
    steps:
      - checkout
      - gcp-cli/setup
      - run:
          name: Install GKE Auth plugin
          command: gcloud components install gke-gcloud-auth-plugin
      - pulumi/login
      - run:
          name: Install dependencies
          command: npm i
          working_directory: .infra
      - run:
          name: Pulumi up
          command: pulumi up -r -y --suppress-outputs --stack dailydotdev/prod -c tag=$CIRCLE_SHA1
          working_directory: .infra
workflows:
  build:
    jobs:
      - build
      - test:
          requires:
            - build
          filters:
            branches:
              ignore: master
      - build_and_push_docker:
          requires:
            - build
          context: GCR
          filters:
            branches:
              ignore: /pull\/[0-9]+/
      - pulumi_preview:
          context: PROD
          filters:
            branches:
              ignore:
                - /pull\/[0-9]+/
                - main
      - pulumi_up:
          requires:
            - build_and_push_docker
          context: PROD
          filters:
            branches:
              only:
                - main
      - gcp-gcr/add-image-tag:
          requires:
            - build_and_push_docker
          context: GCR
          image: $CIRCLE_PROJECT_REPONAME
          source-tag: $CIRCLE_SHA1
          target-tag: latest
          registry-url: us.gcr.io
          filters:
            branches:
              only:
                - main
