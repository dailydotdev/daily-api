// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`query readHistory should return the reading history of user in descending order 1`] = `
Object {
  "readHistory": Object {
    "edges": Array [
      Object {
        "node": Object {
          "post": Object {
            "id": "p1",
            "image": "sample.image.test",
            "source": Object {
              "image": "http://image.com/a",
            },
            "title": "P1",
            "url": "http://p1.com",
          },
          "timestamp": "2021-09-22T07:15:51.247Z",
        },
      },
      Object {
        "node": Object {
          "post": Object {
            "id": "p2",
            "image": "sample.image.test",
            "source": Object {
              "image": "http://image.com/b",
            },
            "title": "P2",
            "url": "http://p2.com",
          },
          "timestamp": "2020-09-22T07:15:51.247Z",
        },
      },
    ],
    "pageInfo": Object {
      "endCursor": "dGltZToxNjAwNzU4OTUxMjQ3",
      "hasNextPage": false,
    },
  },
}
`;

exports[`query readHistory should return user's reading history in without the hidden ones 1`] = `
Object {
  "readHistory": Object {
    "edges": Array [
      Object {
        "node": Object {
          "post": Object {
            "id": "p2",
            "image": "sample.image.test",
            "source": Object {
              "image": "http://image.com/b",
            },
            "title": "P2",
            "url": "http://p2.com",
          },
          "timestamp": "2021-09-22T07:15:51.247Z",
        },
      },
    ],
    "pageInfo": Object {
      "endCursor": "dGltZToxNjMyMjk0OTUxMjQ3",
      "hasNextPage": false,
    },
  },
}
`;

exports[`query readHistory should return user's reading history paginated 1`] = `
Object {
  "readHistory": Object {
    "edges": Array [
      Object {
        "node": Object {
          "post": Object {
            "id": "p2",
            "image": "sample.image.test",
            "source": Object {
              "image": "http://image.com/b",
            },
            "title": "P2",
            "url": "http://p2.com",
          },
          "timestamp": "2021-10-22T07:15:51.247Z",
        },
      },
      Object {
        "node": Object {
          "post": Object {
            "id": "p2",
            "image": "sample.image.test",
            "source": Object {
              "image": "http://image.com/b",
            },
            "title": "P2",
            "url": "http://p2.com",
          },
          "timestamp": "2021-09-22T07:15:51.247Z",
        },
      },
      Object {
        "node": Object {
          "post": Object {
            "id": "p2",
            "image": "sample.image.test",
            "source": Object {
              "image": "http://image.com/b",
            },
            "title": "P2",
            "url": "http://p2.com",
          },
          "timestamp": "2021-08-22T07:15:51.247Z",
        },
      },
      Object {
        "node": Object {
          "post": Object {
            "id": "p1",
            "image": "sample.image.test",
            "source": Object {
              "image": "http://image.com/a",
            },
            "title": "P1",
            "url": "http://p1.com",
          },
          "timestamp": "2020-09-22T07:15:51.247Z",
        },
      },
    ],
    "pageInfo": Object {
      "endCursor": "dGltZToxNjAwNzU4OTUxMjQ3",
      "hasNextPage": false,
    },
  },
}
`;

exports[`query userReadHistory should return the read history 1`] = `
Array [
  Object {
    "date": "2021-04-14",
    "reads": 2,
  },
  Object {
    "date": "2021-04-23",
    "reads": 1,
  },
  Object {
    "date": "2021-04-24",
    "reads": 1,
  },
  Object {
    "date": "2021-04-26",
    "reads": 3,
  },
]
`;

exports[`query userReadingRank should return partially null result when the user asks for someone else 1`] = `
Object {
  "currentRank": 0,
  "progressThisWeek": null,
  "rankLastWeek": null,
  "rankThisWeek": null,
  "readToday": null,
}
`;

exports[`query userReadingRank should return the reading rank 1`] = `
Object {
  "currentRank": 2,
  "progressThisWeek": 4,
  "rankLastWeek": 1,
  "rankThisWeek": 2,
  "readToday": Anything,
}
`;

exports[`query userReadingRankHistory should ignore views during current week 1`] = `
Array [
  Object {
    "count": 1,
    "rank": 2,
  },
]
`;

exports[`query userReadingRankHistory should not count views in the same day multiple times 1`] = `
Array [
  Object {
    "count": 2,
    "rank": 0,
  },
  Object {
    "count": 1,
    "rank": 1,
  },
]
`;

exports[`query userReadingRankHistory should return the reading rank history 1`] = `
Array [
  Object {
    "count": 1,
    "rank": 0,
  },
  Object {
    "count": 2,
    "rank": 1,
  },
]
`;

exports[`query userStats should return partial user stats when no posts or no comments 1`] = `
Object {
  "userStats": Object {
    "numCommentUpvotes": 2,
    "numComments": 1,
    "numPostUpvotes": 0,
    "numPostViews": 0,
    "numPosts": 0,
  },
}
`;

exports[`query userStats should return partially null result when the user is not the stats owner 1`] = `
Object {
  "numCommentUpvotes": null,
  "numComments": 1,
  "numPostUpvotes": null,
  "numPostViews": null,
  "numPosts": 0,
}
`;

exports[`query userStats should return the user stats 1`] = `
Object {
  "userStats": Object {
    "numCommentUpvotes": 15,
    "numComments": 2,
    "numPostUpvotes": 20,
    "numPostViews": 100,
    "numPosts": 3,
  },
}
`;
