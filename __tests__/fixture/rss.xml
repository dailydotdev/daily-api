<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>MongoDB $weeklyUpdate #1: Guess Who's Back?</title>
      <author>Adrienne Tacke</author>
      <pubDate>Mon, 24 Aug 2020 20:49:54 +0000</pubDate>
      <link>https://dev.to/mongodb/mongodb-weeklyupdate-1-guess-who-s-back-1kf0</link>
      <guid>https://dev.to/mongodb/mongodb-weeklyupdate-1-guess-who-s-back-1kf0</guid>
      <description>&lt;p&gt;üé∂ back again... üé∂&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hi-everyone" class="anchor"&gt;
  &lt;/a&gt;
  üëã Hi everyone!
&lt;/h1&gt;

&lt;p&gt;Welcome to the FIRST edition of MongoDB $weeklyUpdate, a weekly digest of MongoDB tutorials, articles, and community spotlights!  &lt;/p&gt;

&lt;p&gt;üòÖ We know, we know...MongoDB has been kinda AFK (away from keyboard) for a while on Dev.to, but that's all about to change! Each week, we'll be sharing the latest and greatest MongoDB content, curated by &lt;a href="https://twitter.com/AdrienneTacke"&gt;Adrienne Tacke&lt;/a&gt; at &lt;a href="https://dev.to/mongodb"&gt;MongoDB&lt;/a&gt;: &lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__118762"&gt;
  
    .ltag__user__id__118762 .follow-action-button {
      background-color: #3E4146 !important;
      color: #FFFFFF !important;
      border-color: #3E4146 !important;
    }
  
    &lt;a href="/adriennetacke" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---sNdAX7K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Zus4tDif--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/118762/85fd62f1-066b-4460-a20a-66b3d8df44b8.jpg" alt="adriennetacke image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/adriennetacke"&gt;Adrienne Tacke&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/adriennetacke"&gt;Code finds a way; I just help.&lt;/a&gt;
    &lt;/div&gt;
    &lt;p class="ltag__user__social"&gt;
        &lt;a href="https://twitter.com/AdrienneTacke" rel="noopener"&gt;
          &lt;img class="icon-img" alt="twitter logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--oEHrSmvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-logo.svg"&gt;AdrienneTacke
        &lt;/a&gt;
        &lt;a href="https://github.com/adriennetacke" rel="noopener"&gt;
          &lt;img class="icon-img" alt="github logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--C74Jn3f1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo.svg"&gt;adriennetacke
        &lt;/a&gt;
        &lt;a href="https://adrienne.io" rel="noopener"&gt;
          &lt;img class="icon-img" alt="external link icon" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WsHTbjfA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/link.svg"&gt;https://adrienne.io
        &lt;/a&gt;
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
  We'll be featuring our favorite community content too. We're just excited to be back again so that we can educate and empower our fellow developers! 

&lt;p&gt;Enjoy the first edition!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#icymi-on-the-devhub" class="anchor"&gt;
  &lt;/a&gt;
  üí° ICYMI on the &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Want to find the latest MongoDB tutorials and articles written for developers, by developers? Look no further than our &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://developer.mongodb.com/how-to/real-time-chat-phaser-game-mongodb-socketio"&gt;Real-Time Chat in a Phaser Game with MongoDB and Socket.io&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Interaction in a game comes in many forms! One of the most overlooked ways to add interaction among players is the in-game chat. Check out this tutorial to learn how to add real-time chat to your games with MongoDB and Socket.io.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://developer.mongodb.com/how-to/integration-test-realm-serverless-apps"&gt;How to Write Integration Tests for MongoDB Realm Serverless Apps&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
We know we need them, but rarely do we write them... I'm talking about integration tests! Tune in to the second post of the larger &lt;em&gt;DevOps + MongoDB Realm Serverless Functions = üòç&lt;/em&gt; blog series, where you'll learn how to write integration tests for MongoDB Realm serverless apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://developer.mongodb.com/how-to/use-union-all-aggregation-pipeline-stage"&gt;How to Use the Union All Aggregation Pipeline Stage in MongoDB 4.4&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you've ever needed to combine two or more collections into a single result set in your aggregation pipeline, I have wonderful news for you: now you can! MongoDB 4.4 released the new $unionWith pipeline stage which is equivalent to SQL's UNION ALL operator (only in the good ways). Check out the full tutorial, complete with code samples!&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#last-week-on-twitch" class="anchor"&gt;
  &lt;/a&gt;
  üì∫ Last Week on &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;We stream tech tutorials, live coding, and talk to members of our community every Friday. Sometimes, we even stream twice a week! Be sure to &lt;a href="https://www.twitch.tv/mongodb"&gt;follow us on Twitch&lt;/a&gt; to be notified of every stream!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.twitch.tv/videos/717244976"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YtjmlBHw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EfuI5FWUcAATIkn%3Fformat%3Djpg%26name%3Dsmall" alt='COVID-19 vectors next to title "Building and Scaling a CoronaTracker App with MongoDB'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ever wonder what it's like to build AND scale an app in the middle of (an unfortunately ongoing) pandemic? Well, the &lt;a href="https://coronatracker.me/"&gt;CoronaTracker App&lt;/a&gt; team did! Tune into our discussion on how a focus on open source and global community helped make this app a reality!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.twitch.tv/videos/717244976"&gt;Watch now&lt;/a&gt;&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#%F0%9F%8E%99-last-word-on-the-mongodb-podcast" class="anchor"&gt;
  &lt;/a&gt;
  üéô Last Word on the &lt;a href="https://mongodb.libsyn.com/appfarm-with-marius-tuft-mathisen-and-ole-borgersen"&gt;MongoDB Podcast&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/4GXaEUFWF9TPBbjcmzwSUg%20"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Episode 16: This week, &lt;a href="https://appfarm.io/"&gt;AppFarm&lt;/a&gt; co-founders Marius Tuft Mathisen and Ole Borgersen dive into low-code and no-code application development with hosts Nic Raboy &amp;amp; Mike Lynn.&lt;/p&gt;

&lt;p&gt;(Not listening on Spotify? We got you! We're most likely on your favorite podcast network, including &lt;a href="https://podcasts.apple.com/us/podcast/ep-16-low-code-and-no-code-with-appfarm/id1500452446?i=1000488693621"&gt;Apple Podcasts&lt;/a&gt;, &lt;a href="https://player.fm/series/the-mongodb-podcast/ep-16-low-code-and-no-code-with-appfarm"&gt;PlayerFM&lt;/a&gt;, &lt;a href="https://podtail.com/en/podcast/the-mongodb-podcast/ep-16-low-code-and-no-code-with-appfarm/"&gt;Podtail&lt;/a&gt;, and &lt;a href="https://www.listennotes.com/podcasts/the-mongodb-podcast/ep-16-low-code-and-no-code-7n1f3VUcRBC/"&gt;Listen Notes&lt;/a&gt; üòä )&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#community-spotlight" class="anchor"&gt;
  &lt;/a&gt;
  üëè Community Spotlight
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Every week, we pick interesting articles, questions, and more from all over the internet! Be sure to use the #MongoDB hashtag when posting on dev.to or leave a comment on my weekly Tweets. You might be featured in an upcoming edition!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://developer.mongodb.com/community/forums/t/slow-query-performance-with-graphql-relationships/7969"&gt;Slow query performance with GraphQL relationships&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;&lt;a href="https://developer.mongodb.com/community/forums"&gt;https://developer.mongodb.com/community/forums&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
Experiencing slow API response times with GraphQL in your MongoDB Realm apps? Check out this discussion for possible insights.&lt;/p&gt;

&lt;p&gt;üçÉ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/lennythedev/node-workshop-part-2-free-online-workshop-by-scs-concordia-4e37"&gt;üõ†Node Workshop part 2 - free online workshop by SCS Concordia&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;&lt;a href="https://dev.to"&gt;https://dev.to&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lennythedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pm3zw4aY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--YKYcU8vl--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/121411/d5c5a3e7-0c97-4715-af6e-c194416f232b.jpeg" alt="lennythedev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lennythedev/node-workshop-part-2-free-online-workshop-by-scs-concordia-4e37" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Node Workshop part 2 - free online workshop by SCS Concordia&lt;/h2&gt;
      &lt;h3&gt;Lenmor Ld „Éª Aug 22 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mongodb&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#workshop&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;DEV user Lenmor Ld is hosting a free workshop this Thurs, Aug 27. Check this out to learn how to connect to MongoDB Atlas DB, a Cloud NoSQL database to your Node applications!&lt;/p&gt;

&lt;p&gt;üçÉ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://developer.mongodb.com/community/forums/t/add-mongodb-4-2-arm64-builds-for-raspberry-pi-os-64-bit-debian-buster/5046"&gt;Add MongoDB 4.2 ARM64 builds for Raspberry Pi OS 64 bit (Debian Buster)&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;&lt;a href="https://developer.mongodb.com/community/forums"&gt;https://developer.mongodb.com/community/forums&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
Curious about running MongoDB on a Raspberry Pi? This discussion has some great instructions on how to get started!&lt;/p&gt;

&lt;p&gt;üçÉ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/shadowphoenix/check-for-unique-documents-in-mongodb-with-spring-boot-971"&gt;Check for Unique Documents in MongoDB with Spring Boot&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;&lt;a href="https://dev.to"&gt;https://dev.to&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/shadowphoenix" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--boaUtB15--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ihpBbK2A--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/417722/191378af-eeff-4eac-8b5f-7363bb7d3c36.png" alt="shadowphoenix image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/shadowphoenix/check-for-unique-documents-in-mongodb-with-spring-boot-971" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Check for Unique Documents in MongoDB with Spring Boot&lt;/h2&gt;
      &lt;h3&gt;Rose „Éª Aug 19 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mongodb&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#learning&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;üçÉ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://stackoverflow.com/questions/63508131/how-to-aggregate-with-value-matched-in-an-array-then-sort"&gt;How to aggregate with value matched in an array then sort&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;&lt;a href="https://stackoverflow.com/"&gt;https://stackoverflow.com/&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
Need to do this common aggregation? Check out this answer from user turivishal!&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>programming</category>
      <category>database</category>
    </item>
    <item>
      <title>GSoC with CHAOSS - Final three weeks!</title>
      <author>Aastha Bist</author>
      <pubDate>Mon, 24 Aug 2020 19:35:38 +0000</pubDate>
      <link>https://dev.to/bistaastha/gsoc-with-chaoss-final-three-weeks-gj3</link>
      <guid>https://dev.to/bistaastha/gsoc-with-chaoss-final-three-weeks-gj3</guid>
      <description>&lt;p&gt;This is a detailed work report of my last three weeks of GSoC with the CHAOSS Badging project.&lt;/p&gt;

&lt;p&gt;During these three weeks, I worked on writing and bringing Probot bots together for D&amp;amp;I Badging.&lt;/p&gt;

&lt;p&gt;Matt Snell, one of my mentors, took up the task of putting together a frontend of Event Badging which can be accessed through the CHAOSS website. Check it out &lt;a href="https://chaoss.community/diversity-and-inclusion-badging/"&gt;here&lt;/a&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#counter-bot" class="anchor"&gt;
  &lt;/a&gt;
  Counter bot
&lt;/h2&gt;

&lt;p&gt;Throughout building different components for this review process, one of the more confusing things has been settling on a method for Badge assignments. Some of the things we have tried have been as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Deliverable based badge assignment&lt;/strong&gt; - Assigning Badges based on the number of deliverables. This was the initial approach, and for Events, it was tweaked a bit to include additional criteria for Events. During the first pilot testing, we discovered that this approach was clumsy, and also, not scalable. Meaning adding new metric information to the checklist or the template would mean editing and decide on a new Badge assignment criteria.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Implementation complexity&lt;/strong&gt; - This approach divided up the checklist items into basic, intermediate, and advanced based on the assumed complexity behind implementing the associated D&amp;amp;I metrics. This approach seemed slightly more scalable than the first one.&lt;br&gt;
It was cumbersome to divide the metrics based on implementation, especially project metrics that were a mixed bag. Like the issue tracker inclusivity metric could include basic checks for assigning labels, but something which is more advanced would be doing relative color coding for similar kinds of labels.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Percentage based badge assignment&lt;/strong&gt; - This is the current approach as of the end of Pilot testing phase two, and this has proved to be simpler and more scalable than the above two approaches. Here, the Badge calculation is left up to a workflow bot, which:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Calculates the overall number of markdown checkmarks in a checklist.&lt;/li&gt;
&lt;li&gt;Calculates the number of checks marked positively by the reviewer, excluding the number of initial checks, since they are assumed to be completely positive before badge calculation.&lt;/li&gt;
&lt;li&gt;Comments appropriate badge one invoking a certain slash command in a GitHub issue.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the implementation of the bot-section that calculates and displays Badges - &lt;a href="https://github.com/bistaastha/badging-bot/blob/master/src/calculateBadge.js"&gt;https://github.com/bistaastha/badging-bot/blob/master/src/calculateBadge.js&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reviewer-assignment" class="anchor"&gt;
  &lt;/a&gt;
  Reviewer Assignment
&lt;/h2&gt;

&lt;p&gt;Automating reviewer assignment allowed for getting a review set up for starting as soon as the reviewers were available to mark their observations. Right now, reviewers can work on a review if they meet the following two technical requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They are a part of the &lt;code&gt;badging/Reviewers&lt;/code&gt; team, which gives them access to edit bot created checklists.&lt;/li&gt;
&lt;li&gt;Their GitHub username is added to the &lt;code&gt;.github/reviewers.md&lt;/code&gt; in the respective Event or Project repositories.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reviewer assignment works if both these conditions are met. When an Applicant opens an issue, two usernames would be picked at random from reviewers.md and will be successfully assigned an issue if they are a part of the Reviewers team.&lt;/p&gt;

&lt;p&gt;Here is the implementation of the bot-section for assignment - &lt;a href="https://github.com/bistaastha/badging-bot/blob/master/src/assignReviewers.js"&gt;https://github.com/bistaastha/badging-bot/blob/master/src/assignReviewers.js&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#second-pilot-testing" class="anchor"&gt;
  &lt;/a&gt;
  Second pilot testing
&lt;/h2&gt;

&lt;p&gt;From August 17 to August 21, the second pilot testing for D&amp;amp;I Badging took place. The improved front-end was a major contributor to speeding up the process. Also, it meant that the review-flow shifted to issues rather than pull requests, so applicants are no longer required to deal with creating commits, which also reduced the overhead the process had during the first pilot testing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-work" class="anchor"&gt;
  &lt;/a&gt;
  Future work
&lt;/h2&gt;

&lt;p&gt;Going forward, I intend to work on supporting separate checklists for Virtual events and add my final changes to the project badging section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#important-links" class="anchor"&gt;
  &lt;/a&gt;
  Important links
&lt;/h2&gt;

&lt;p&gt;CHAOSS Badging GitHub organization:&lt;br&gt;
&lt;a href="https://github.com/badging"&gt;https://github.com/badging&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Thanks for reading :)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Flexbox Rocks!</title>
      <author>James Cox</author>
      <pubDate>Mon, 24 Aug 2020 19:17:21 +0000</pubDate>
      <link>https://dev.to/jamesncox/flexbox-rocks-2bf9</link>
      <guid>https://dev.to/jamesncox/flexbox-rocks-2bf9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Yesterday I refactored a &lt;a href="https://codesandbox.io/s/flexbox-practice-xji8g?file=/src/styles.css"&gt;Codesandbox&lt;/a&gt; with Flexbox, which displays cards of "Powerful People", their names, roles, hobbies and a picture. &lt;/p&gt;

&lt;p&gt;I wanted to accomplish two things. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;structure the card itself using flexbox.&lt;/li&gt;
&lt;li&gt;display all the cards in either a responsive row of cards on wider screens, or a single column of cards on narrow screens.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The card.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SZzSL6Eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hqdgrf4lsm0bid8at1ld.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SZzSL6Eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hqdgrf4lsm0bid8at1ld.jpeg" alt="Screenshot of Flexbox layout card "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cards in flexbox row on wider screen.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hNC3hLeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lqsrb3w7miof846x0l85.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hNC3hLeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lqsrb3w7miof846x0l85.jpg" alt="Screenshot of all the cards in flexbox rows widescreen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cards in a flexbox column on narrower screen.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iPOA_aOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g5dxl4d2bck3tmoz8b8s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iPOA_aOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g5dxl4d2bck3tmoz8b8s.jpg" alt="Screen shot of cards in flexbos column on narrow screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post will attempt to breakdown not only how I did this with CSS and HTML, but also the process of designing the card beforehand.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-one-design" class="anchor"&gt;
  &lt;/a&gt;
  Step One - Design
&lt;/h2&gt;

&lt;p&gt;I use &lt;a href="https://excalidraw.com/"&gt;Excalidraw&lt;/a&gt; to mock up elements on a website. Excalidraw lets you quickly see your ideas on the screen and gives you a handy reference when you begin coding. &lt;/p&gt;

&lt;p&gt;I came up with this mockup for the card.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pa8OKGU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3nohj397hex5ut9l8c0s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pa8OKGU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3nohj397hex5ut9l8c0s.jpg" alt="Excalidraw card mockup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the layout for all the cards.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H22S6dNR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3980whni9xuf8isqg1h1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H22S6dNR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3980whni9xuf8isqg1h1.jpg" alt="Excalidraw mockup for all the cards in rows"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks pretty good. Now the hard hard part is making my cards look and behave like I want. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#flexbox-resources" class="anchor"&gt;
  &lt;/a&gt;
  Flexbox resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YrKBPWo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vkpj09kxuhp1183s3y9a.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YrKBPWo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vkpj09kxuhp1183s3y9a.jpeg" alt="Flexbox Froggy frogs sitting on lily pads"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have never tried to use CSS flex properties before, I highly recommend playing around with &lt;a href="https://flexboxfroggy.com/"&gt;Flexbox Froggy&lt;/a&gt;, which sort of makes learning flexbox a game. I promise if you go through the tutorial a couple times, you will have a much better idea of how to use flexbox. &lt;/p&gt;

&lt;p&gt;Another great resource is CSS-Tricks' &lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"&gt;A Complete Guide to Flexbox&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-two-understanding-your-design" class="anchor"&gt;
  &lt;/a&gt;
  Step Two - Understanding Your Design
&lt;/h2&gt;

&lt;p&gt;I started to understand flexbox when I started to imagine every element on the screen as its own mini screen. For example, the card is its own contained environment. The inner contents of the card do not (have to) care about the elements outside of it. And the layout that ALL the cards live in is ITS own environment. It does not (have to) care about the other elements on the screen.&lt;/p&gt;

&lt;p&gt;I think it helps to start with the outermost "environment" (represented by a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; in your HTML) and work inwards. The outermost environment of my Powerful Person site is represented by the outermost &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; in my HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;CSS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;The property &lt;code&gt;text-align: center;&lt;/code&gt; places the title "Powerful People" in the center.&lt;/p&gt;

&lt;p&gt;Next I want to display all my cards in rows. I need to create another "environment" where I can apply the flex properties to my cards and display them in rows.&lt;/p&gt;

&lt;p&gt;Take a look at this image to see how I broke down the CSS and HTML:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IXl87Z9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8xlqfx2ffqin2995drcm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IXl87Z9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8xlqfx2ffqin2995drcm.jpg" alt="Excalidraw mockup of cards in rows"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I create a new CSS class &lt;code&gt;.wrapper&lt;/code&gt; that will "wrap" around all my cards and dictate their layout.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;em&gt;EDIT: It has been pointed out to me that &lt;code&gt;row&lt;/code&gt; is the default value for the &lt;code&gt;flex-direction&lt;/code&gt; property. Which makes including it in &lt;code&gt;.wrapper&lt;/code&gt; redundant. I am going to keep it here so that others can learn from this and I can reference it later if I need to.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Flexbox has a lot of awesome properties, and one of those is &lt;code&gt;flex-direction&lt;/code&gt;. You can do rows, columns, reverse rows, and reverse columns. &lt;code&gt;flex-direction: row&lt;/code&gt; places the cards in a single, horizontal row.&lt;/p&gt;

&lt;p&gt;What is &lt;code&gt;flex-wrap: wrap&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;To illustrate, I will comment out that line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/* flex-wrap: wrap; */&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Look what happens.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZeaZl6D0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/baflg9zmf2cvizvd3yec.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZeaZl6D0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/baflg9zmf2cvizvd3yec.jpg" alt="Screenshot of cards running off the page without flex-wrap: wrap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well that is just not great.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;justify-content: center;&lt;/code&gt; is pretty easy to understand. Let's take a look at examples with that line commented out and then when we add it back in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/* justify-content: center; */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zCL1AJ44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/epzp9su7x28ldnt7dgd9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zCL1AJ44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/epzp9su7x28ldnt7dgd9.jpg" alt="Cards when justify-content: center is commented out"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;justify-content: center;&lt;/code&gt; back in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--efSdZJX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qdizg4vbqaanli6ei13r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--efSdZJX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qdizg4vbqaanli6ei13r.jpg" alt="Cards with justify-content: center back in"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shifting-gears-responsive-css" class="anchor"&gt;
  &lt;/a&gt;
  Shifting Gears - Responsive CSS
&lt;/h2&gt;

&lt;p&gt;This is about the point in time when I realized that I was creating "desktop-first" design, and I wanted to shift to a "mobile-first" design practices. &lt;/p&gt;

&lt;p&gt;Responsive web design makes websites adjust how they appear on the screen depending on the screen size. This is achieved with CSS "media queries" which the developer defines based on how they want their site to behave. If you are not familiar with CSS media queries, check out these examples from &lt;a href="https://www.w3schools.com/css/css3_mediaqueries_ex.asp"&gt;w3schools.com&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;CSS media queries are outside the scope of this post (and once I write one, I'll link it here). &lt;/p&gt;

&lt;p&gt;However, I must talk about how I refactored my &lt;code&gt;.wrapper&lt;/code&gt; class to display my cards in a single column on a mobile device and added a second CSS file &lt;code&gt;responsive.css&lt;/code&gt; with media query for my wrapper class to change the flex direction back to rows when the screen is wide enough. &lt;/p&gt;

&lt;p&gt;First my refactored, mobile-first CSS &lt;code&gt;.wrapper&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Now all my cards are in a single, vertical column. Whatever the screen size is, my cards now will always be in a single, vertical column.&lt;/p&gt;

&lt;p&gt;I want them still be displayed in rows on larger screens. I need a CSS media query.&lt;/p&gt;

&lt;p&gt;(Don't forget to import &lt;code&gt;responsive.css&lt;/code&gt; into your top-level component. For me that is &lt;code&gt;App.js&lt;/code&gt;.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* responsive.css */&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1100px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.wrapper&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;em&gt;EDIT: I mentioned above that having &lt;code&gt;flex-direction: row;&lt;/code&gt; was redundant, but it is NOT redundant here. This media query is over-riding the &lt;code&gt;flex-direction: column;&lt;/code&gt; that I refactored earlier.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I am telling my &lt;code&gt;.wrapper&lt;/code&gt; class to change its flex direction back to rows whenever the screen device is 1100px or larger.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#confession" class="anchor"&gt;
  &lt;/a&gt;
  Confession
&lt;/h2&gt;

&lt;p&gt;I actually created the cards first. Before I figured out how to display all the cards in rows or columns. Before I switched from a desktop-first design to mobile-first design. &lt;/p&gt;

&lt;p&gt;There was a reason for that. At first I was working "dummy data" and only had one card on my screen. I had not yet created my &lt;a href="https://dev.to/jamesncox/react-patterns-local-api-495j"&gt;local API&lt;/a&gt;. No need for defining a layout.&lt;/p&gt;

&lt;p&gt;BUT. It made sense first to talk about the concepts of flex from the outermost environment to the innermost (my cards). If you were creating your own layout, you could easily replace the cards with CSS placeholders if you want to see how elements might appear on the screen.&lt;/p&gt;

&lt;p&gt;You could do something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;align-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;And then your HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;This will simulate multiple cards mapped and rendered to your screen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-kind-of-creating-the-cards" class="anchor"&gt;
  &lt;/a&gt;
  Step 3 (kind of) - Creating the Cards
&lt;/h2&gt;

&lt;p&gt;Take a look at this Excalidraw sketch I made:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3QbSNsAS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tz1gginm3fcxthnz3n4z.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3QbSNsAS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tz1gginm3fcxthnz3n4z.jpg" alt="Excalidraw mockup with CSS and HTML descriptions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember my mental model that each element on your page can be considered its own "environment". Each card lives inside the &lt;code&gt;.wrapper&lt;/code&gt; environment, but whatever is INSIDE the card will have no idea how to behave until we create a new environment that dictates how to look and act.&lt;/p&gt;

&lt;p&gt;Each &lt;code&gt;.card&lt;/code&gt; div has its own "wrapper" div called &lt;code&gt;.row&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.row&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Here we are telling the contents inside our card to display in a horizontal row, next to each other left to right.&lt;/p&gt;

&lt;p&gt;Next, each element inside the &lt;code&gt;.row&lt;/code&gt; class will be "wrapped" in a div called &lt;code&gt;.column&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.column&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Now any elements inside the &lt;code&gt;.column&lt;/code&gt; class will displayed vertically due to &lt;code&gt;flex-direction: column;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What is &lt;code&gt;flex: 1&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://css-tricks.com/almanac/properties/f/flex/#:~:text=flex%3A%200%20auto%3B&amp;amp;text=It%20makes%20the%20flex%20item,items%20along%20the%20main%20axis."&gt;CSS Tricks&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;flex: &lt;code&gt;positive-number&lt;/code&gt;&lt;br&gt;
Equivalent to flex: 1 0px. It makes the flex item flexible and sets the flex basis to zero, resulting in an item that receives the specified proportion of the remaining space.&lt;/p&gt;

&lt;p&gt;If all items in the flex container use this pattern, their sizes will be proportional to the specified flex factor.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now anything inside the &lt;code&gt;.column&lt;/code&gt; class will respond to &lt;code&gt;display: flex;&lt;/code&gt; and we can use flex properties. Take a look at the rest of my CSS which dictates the layout of the card's contents:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.info&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;align-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Bangers'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;cursive&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;lighter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h4&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;align-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;You will notice that each HTML element (h1, h4, li, p and img) is utilizing a flex property, &lt;code&gt;text-align&lt;/code&gt; or &lt;code&gt;align-self&lt;/code&gt;. Because they are inside the &lt;code&gt;.column&lt;/code&gt; class, they are responding the &lt;code&gt;display: flex&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;And finally my full &lt;code&gt;App.js&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./responsive.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PersonData&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./data/personData&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Powerful&lt;/span&gt; &lt;span class="nx"&gt;People&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;wrapper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;PersonData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;row&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    
                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Full&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h4&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Profession&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h4&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hobbies&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hobbies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;hobby&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
                          &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;     
                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hobby&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                          &lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;})}&lt;/span&gt;
                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Notice that the information about each person is an extra class called &lt;code&gt;.info&lt;/code&gt; in order to add some extra alignment and spacing between my two columns.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Thank you for reading my breakdown of Flexbox and I hope that you walk away feeling a little more confident about how to use flex properties to improve your CSS layout and design skills! &lt;/p&gt;

&lt;p&gt;As always, I would love feedback and constructive criticism. I am sure there are tons of things I can still learn and improve. If you see anything I can do or explain better, let me know in the comments!&lt;/p&gt;

&lt;p&gt;Thanks again and HAPPY CODING!&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Finally Understanding JavaScript</title>
      <author>Lynne</author>
      <pubDate>Mon, 24 Aug 2020 19:01:20 +0000</pubDate>
      <link>https://dev.to/freddilynne/finally-understanding-javascript-50hb</link>
      <guid>https://dev.to/freddilynne/finally-understanding-javascript-50hb</guid>
      <description>&lt;p&gt;I can't tell you enough, how much I am starting to get JavaScript after four weeks of tutorials, reading, challenges, and games! This really was a learning experience for me. I had to figure out how my brain wanted information presented for it to stay put. &lt;/p&gt;

&lt;p&gt;I got so excited when I finally understood how loops work with the help of &lt;em&gt;Head First JavaScript Programming A Brain-Friendly Guide&lt;/em&gt; by Eric Freeman &amp;amp; Elisabeth Robson. If you are having trouble diving into Javascript (like I did), I highly recommend this book if you are a visual learner. There were pictures and arrows and browser examples. I never had been so excited to read a book and try out the exercises!&lt;/p&gt;

&lt;p&gt;I even learned how to code Happy Birthday!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Happy Birthday to you.&amp;lt;br&amp;gt;);
  i = i + 1;
}

document.write(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="nx"&gt;Happy&lt;/span&gt; &lt;span class="nx"&gt;Birthday&lt;/span&gt; &lt;span class="nx"&gt;dear&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; + name + &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/br&amp;gt;"&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Happy Birthday to you. &amp;lt;/br&amp;gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;I also learned what pseudocode is, which was very helpful to understand the outline of what's going on before you even insert the JavaScript code. It reminds me of the fifth grade when we would brainstorm our short stories--figuring out the beginning, what will happen in the middle, and how we get to the end. I don't know why I didn't think of writing out the logic first! It makes so much sense to visually see what codes are appropriate for each action. &lt;/p&gt;

&lt;p&gt;My mind is blown. Functions, arguments, parameters, global and local variables . . . I'm quite enjoying JavaScript!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Last Week's Accomplishments:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Attacking JavaScript at a different angle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Check it out:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Books I've Started:

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Head First JavaScript Programming A Brain-Friendly Guide&lt;/em&gt; by Eric Freeman &amp;amp; Elisabeth Robson&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;On My Mind:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Who out there is a visual learner? Do you have any tips for making learning code fun? Or understandable?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Until next week!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3GUHq6d4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/59exhldxjocxu0sa4bz6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3GUHq6d4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/59exhldxjocxu0sa4bz6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>books</category>
    </item>
    <item>
      <title>üïî Things I Wish I Knew When I Started Programming</title>
      <author>Fahad Imran</author>
      <pubDate>Mon, 24 Aug 2020 18:38:36 +0000</pubDate>
      <link>https://dev.to/fimrandev/things-i-wish-i-knew-when-i-started-programming-361e</link>
      <guid>https://dev.to/fimrandev/things-i-wish-i-knew-when-i-started-programming-361e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#a-little-backstory" class="anchor"&gt;
  &lt;/a&gt;
  üìñ A Little Backstory
&lt;/h2&gt;

&lt;p&gt;My journey as a programmer started when I chose to pursue &lt;strong&gt;Software Engineering&lt;/strong&gt; as a major after completing my High School Education. Since then, I have been programming for the better part of last &lt;strong&gt;2 years&lt;/strong&gt; in various programming languages from &lt;em&gt;Python, Java, C++&lt;/em&gt; and recently &lt;em&gt;JavaScript.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;It is important to mention that I had literally &lt;em&gt;never&lt;/em&gt; written a single line of code before starting my bachelors. In fact, I don't remember taking a &lt;em&gt;Computers course&lt;/em&gt; throughout my Middle and High School Years. Suffice it to say, I was not like those students in my class, who had been coding as a hobby for past 3 years or so, or those who had already published entire Apps to the Play Store. &lt;/p&gt;

&lt;p&gt;Thus, in all aspects I was a complete &lt;strong&gt;Newbie&lt;/strong&gt;. Therefore, I also had some &lt;strong&gt;misconceptions&lt;/strong&gt; about programming and coding in general. It took me the better part of &lt;em&gt;last year and a half&lt;/em&gt; to understand my negligence, and realize how mistaken I was. Thus, I am writing this blog post to help others who are new to programming like I was, by &lt;em&gt;debunking&lt;/em&gt; some common misconceptions about programming.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Enough talking, let's get into it, shall we?&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#programming-languages-dont-matter" class="anchor"&gt;
  &lt;/a&gt;
  üíª Programming Languages DON'T matter
&lt;/h2&gt;

&lt;p&gt;By far the most common thing new programmers are worried about is which &lt;strong&gt;programming language&lt;/strong&gt; to learn. I am here to break the news, that it does &lt;strong&gt;NOT&lt;/strong&gt; matter what language you learn &lt;strong&gt;period&lt;/strong&gt;. Don't get me wrong, I don't think that all languages are created equal. For some use cases, certain languages do have &lt;em&gt;advantages&lt;/em&gt; over others, but as a new developer, choice of language shouldn't be the biggest worry in your mind. &lt;/p&gt;

&lt;p&gt;As a new programmer, your number one priority should be to &lt;strong&gt;master the fundamentals&lt;/strong&gt;. By this I mean, you should have grasp over concepts like &lt;em&gt;variables, data types, data structures, conditionals, loops, algorithms etc.&lt;/em&gt; The reason being, once you have sound knowledge of the fundamentals, you can learn any new language in a matter of days. At the core, all languages use the same concepts and only differ in their syntax. &lt;/p&gt;

&lt;p&gt;I can say with my own example that once you know the basics, picking up a new language will be a piece of cake. So, stop worrying about which language to learn and instead focus on the fundamentals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-be-afraid-of-making-mistakes" class="anchor"&gt;
  &lt;/a&gt;
  üò® DON'T be Afraid of Making Mistakes
&lt;/h2&gt;

&lt;p&gt;Fear of making mistakes is another big reason people fail at programming. I too, was in the same boat. I had the notion that a good programmer knows the exact syntax of the language in addition to writing perfect code that runs the first time round. This notion hindered my ability to learn new things because I was so afraid of making mistakes that I never even tried it.&lt;/p&gt;

&lt;p&gt;This concept of mine was blasted to smithereens in a very short span of time. Writing clean and elegant code that runs on the very first try and produces the correct output is nothing short of a &lt;strong&gt;fantasy&lt;/strong&gt;. Even the most experienced developers cannot write fully functioning and error-free code on the first attempt. &lt;em&gt;The sooner you realize this, the faster you will learn from your mistakes.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;What you must understand is that most of your time coding will be spent on &lt;strong&gt;debugging and looking up errors on the internet.&lt;/strong&gt; In order to succeed as a developer, you are not expected to memorize the entire syntax of a language in your head. I hardly believe anyone can do that. Instead, you should focus on effectively debugging your applications. Errors are an essential part of programming. The sooner you feel comfortable with seeing red output on the screen screaming at you, the quicker you will master programming. Some of the best programmers I know or follow still spend a considerable amount of time solving simple errors and looking up syntax that they cannot remember.&lt;/p&gt;

&lt;p&gt;Another thing you should realize is that the first time you write a piece of code, it will never be perfect. Instead, a good practice is to first write code that works and then refine and &lt;strong&gt;refactor&lt;/strong&gt; that code to make in more &lt;em&gt;readable and concise.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#college-doesnt-teach-you-everything" class="anchor"&gt;
  &lt;/a&gt;
  üéì College DOESN'T teach you Everything
&lt;/h2&gt;

&lt;p&gt;By far the worst notion you could have as a new programmer, is expecting the &lt;em&gt;University or College to teach you everything.&lt;/em&gt; &lt;br&gt;
Universities follow a set curriculum, and while there are certain courses which have greatly benefited me like Database Systems, Computer Networks, Data structures and Algorithms etc. yet many courses were not relevant to what is required in the field. For example, most Universities don't teach you about Web Development in detail or about tools like git and GitHub which are widely used through out the industry. &lt;/p&gt;

&lt;p&gt;Thus, the cold truth is that, you have to &lt;strong&gt;develop a habit of learning on your own&lt;/strong&gt;. In my case, the entire knowledge I have about &lt;em&gt;web development&lt;/em&gt; is through my own efforts and learning. While it may be true in other fields of Engineering, the &lt;em&gt;programming landscape&lt;/em&gt; changes so quickly that its impossible for educational institutions to keep pace. Learning to code is a continuous process and you must keep practicing and expanding your skill set if you want to stay relevant in today's competitive market. &lt;/p&gt;

&lt;p&gt;And the best thing is the abundance of online resources available to help you in this regard. If you want to learn a language or framework there are probably a lot of tutorials and articles that you can consult. So, its a matter of dedication and hard work which you are willing to put in, and you can master a skill in no time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-fall-into-tutorial-hell" class="anchor"&gt;
  &lt;/a&gt;
  üòµ DON'T fall into Tutorial Hell
&lt;/h2&gt;

&lt;p&gt;Another problem that new programmers face is that they tend to fall into &lt;strong&gt;Tutorial Hell&lt;/strong&gt;. Most of us resort to coding tutorials on &lt;em&gt;YouTube and Udemy courses&lt;/em&gt; in order to learn any new language, framework or skill. But these courses have a critical flaw that many of us don't realize. &lt;/p&gt;

&lt;p&gt;As you are following along with your instructor, you might feel very confident and even feel like you're getting everything. But as soon as you finish a course and try to develop something on your own, you'll feel &lt;strong&gt;completely blank&lt;/strong&gt; and have no idea where to even start. This has happened to me many times and its a very sinking feeling.&lt;/p&gt;

&lt;p&gt;The problem with these tutorials and courses is that they teach you how to build a specific application. What they don't teach you is how to develop the mindset to &lt;strong&gt;solve a particular problem&lt;/strong&gt;. Additionally, you also don't understand why the instructor is using a particular framework or why he/she is writing a piece of code in that way and not the other way round. Thus, it just becomes a case of &lt;em&gt;copying code&lt;/em&gt; that the instructor is writing and not understanding the reasoning behind it. So, while you may finish the course and build the application yet, you will be &lt;strong&gt;unable&lt;/strong&gt; to code something from scratch on your own.&lt;/p&gt;

&lt;p&gt;Instead the best way to benefit from these courses is to &lt;strong&gt;modify the code&lt;/strong&gt; after you have finished the project. Try to &lt;em&gt;break&lt;/em&gt; the code and change things around. Experiment with a different approach with implementing a specific feature. At the very least, try to add some &lt;em&gt;functionality&lt;/em&gt; on top of the project. By adopting this approach, you will learn &lt;em&gt;why things work the way they do&lt;/em&gt; and will understand the &lt;em&gt;purpose behind the code&lt;/em&gt;, instead of merely copy pasting it as your own.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-dont-have-to-learn-everything" class="anchor"&gt;
  &lt;/a&gt;
  üìö You DON'T have to learn Everything
&lt;/h2&gt;

&lt;p&gt;Finally, the last bit of advice I will give to upcoming programmers is that &lt;strong&gt;you don't have to learn each and everything under the sun&lt;/strong&gt;. When you first start to code, you quickly realize that there are &lt;em&gt;WAY&lt;/em&gt; too many fields that you can choose from and it can be quite overwhelming to decide what you want to do.&lt;/p&gt;

&lt;p&gt;Let me give you a taste of what I am talking about. Let's say you are interested in &lt;strong&gt;Web Development&lt;/strong&gt;. You can choose to become a &lt;em&gt;Front-End web developer&lt;/em&gt; and work with things like &lt;em&gt;HTML, CSS, JavaScript, SASS&lt;/em&gt; and frameworks like &lt;em&gt;React, Angular, Vue&lt;/em&gt; or libraries like &lt;em&gt;Bootstrap, tailwind CSS etc.&lt;/em&gt; Or you can choose to be a &lt;em&gt;Back-End developer&lt;/em&gt; and work with languages like: &lt;em&gt;Python, PHP, JavaScript&lt;/em&gt; or frameworks like &lt;em&gt;Django, Flask, Express etc&lt;/em&gt; and databases like: &lt;em&gt;MySQL, PostgreSQL or MongoDB etc.&lt;/em&gt; Or you can choose both and become a &lt;em&gt;Full-Stack Developer&lt;/em&gt; and handle both the front and back-end of a web app. You see where I am getting at? And this is just one field. Maybe you fancy &lt;strong&gt;Mobile Development&lt;/strong&gt; or perhaps &lt;strong&gt;Game Development&lt;/strong&gt;. You might be into &lt;strong&gt;Machine Learning&lt;/strong&gt; or &lt;strong&gt;Artificial Intelligence&lt;/strong&gt; and work with data analysis and training complex neural networks. Or you might want to indulge into the field of &lt;strong&gt;cyber security&lt;/strong&gt; and work on ethical hacking and so on.&lt;/p&gt;

&lt;p&gt;Suffice it to say, whatever you want to do there is a field for it. My advice to you is to &lt;strong&gt;choose what you want to specialize in&lt;/strong&gt; and go &lt;em&gt;all out&lt;/em&gt; in it. There is &lt;em&gt;great&lt;/em&gt; demand of talented individuals who work in a specific field instead of knowing a bit about everything. So, experiment to find what you like and then focus on mastering skills needed in that field and you'll be doing better than most.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summing-it-all-up" class="anchor"&gt;
  &lt;/a&gt;
  üí° Summing it all up
&lt;/h2&gt;

&lt;p&gt;Thus, these were some of the things I learned since I started to code. I am in &lt;strong&gt;no way an expert&lt;/strong&gt; yet, this is the essence of what I have personally experienced in my 2 years of programming. I am extremely happy with my decision to choose this field as my profession and I want to give back to the community as much as possible. For all the new programmers starting out, &lt;strong&gt;focus on fundamentals&lt;/strong&gt;, &lt;strong&gt;continue learning in your time&lt;/strong&gt; and &lt;strong&gt;don't forget to have fun!&lt;/strong&gt; üòä&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>Writing If Statements with the Ternary Operator</title>
      <author>Valentina Peric</author>
      <pubDate>Mon, 24 Aug 2020 16:47:10 +0000</pubDate>
      <link>https://dev.to/valentinaperic/writing-if-statements-with-the-ternary-operator-37j</link>
      <guid>https://dev.to/valentinaperic/writing-if-statements-with-the-ternary-operator-37j</guid>
      <description>&lt;p&gt;When I first saw if statements using ternary operators, I was confused. &lt;em&gt;"Why is there a question mark?"&lt;/em&gt; and &lt;em&gt;"Why is there a colon?"&lt;/em&gt; were probably some of the thoughts I had. &lt;/p&gt;

&lt;p&gt;After some research and practice, I was finally getting the grasp on how to take my if statements to the next level using ternary operators.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites üìù
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;A working knowledge of JavaScript (i.e. if statements and truthy/falsy expressions)&lt;/li&gt;
&lt;li&gt;A code editor (I recommend &lt;a href="https://visualstudio.microsoft.com/"&gt;Visual Studio Code&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#lets-get-started" class="anchor"&gt;
  &lt;/a&gt;
  Let's Get Started ‚ú®
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;First, let's breakdown ternary operators using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator"&gt;MDN&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy. This operator is frequently used as a shortcut for the if statement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It looks like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;condition&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;truthy&lt;/span&gt; &lt;span class="nx"&gt;expression&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;falsy&lt;/span&gt; &lt;span class="nx"&gt;expression&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Second, let's take a look at an if statement that could be refactored using the ternary operator&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userIdValid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;userIdValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;userIdValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;This if statement is a great opportunity to refactor using ternary operators. Let's break it down step by step.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find the condition &lt;code&gt;(userId.value.length === 10)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Find the truthy value &lt;code&gt;userIdValid = true;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Find the falsy value &lt;code&gt;userIdValid = false;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Put it all together using "?" and ":"
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;userIdValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userIdValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Notice that you only need the ";" at the very end of the statement.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;üéâAs a bonusüéâ, you can refactor this even further by assigning the statement to the &lt;code&gt;userIdValid&lt;/code&gt; variable like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userIdValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#key-takeaways" class="anchor"&gt;
  &lt;/a&gt;
  Key takeaways ‚ú®
&lt;/h1&gt;

&lt;p&gt;Refactoring this took 8 lines of code and simplified it down to 1 line. This is great! Adding a code comment right above the statement can help explain what is going on. This is helpful for future you and other fellow developers!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//checking the validity of the userId by checking its length&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userIdValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;And there you have it! You just wrote an if statement using ternary operators. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#next-steps" class="anchor"&gt;
  &lt;/a&gt;
  Next Steps ‚ú®
&lt;/h1&gt;

&lt;p&gt;Take a look at some of the if statements you have already written in past or current projects. Do any of them present an opportunity to be refactored using ternary if statements? If yes, I encourage you to give it a try!&lt;/p&gt;

&lt;p&gt;Thanks for reading! Was this article helpful for you? Any ideas that can be shared? Post a comment below!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; This is my first technical blog post! I found a lot of encouragement from reading &lt;a href="https://www.developersguidetocontent.com/"&gt;The Developer's Guide to Content Creation&lt;/a&gt; by &lt;a href="https://dev.to/radiomorillo"&gt;Stephanie Morillo&lt;/a&gt;. I highly recommend it!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>refactorit</category>
    </item>
    <item>
      <title>What are you planning to make for "Hacktober Fest 2020"? üë©üèª‚ÄçüíªüöÄ</title>
      <author>Sarthak Sharma</author>
      <pubDate>Mon, 24 Aug 2020 15:23:08 +0000</pubDate>
      <link>https://dev.to/sarthology/what-are-you-planning-to-make-for-hacktober-fest-2020-4bk8</link>
      <guid>https://dev.to/sarthology/what-are-you-planning-to-make-for-hacktober-fest-2020-4bk8</guid>
      <description>&lt;p&gt;Hey all üëã !&lt;/p&gt;

&lt;p&gt;Do you, folks have any plans for Hacktober Fest? &lt;/p&gt;

&lt;p&gt;Use this post to share your idea, get it tested, and ask people to join your team. üòâ&lt;br&gt;
&lt;a href="https://i.giphy.com/media/3oEdv5n72QTIovDSZG/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3oEdv5n72QTIovDSZG/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Btw Team XenoX is also planning to ship our two Open Source project this October.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;&lt;a href="https://github.com/teamxenox/caligator"&gt;Caligator&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; :üêä An open-source kickass cross-platform Calculator with the power of alligator&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;&lt;a href="https://github.com/sarthology/ovuli"&gt;Ovuli&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; : A multilingual Ovulation Calculator and Calendar üë©üèª‚Äçüíª&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://forms.clickup.com/f/1rz92-5115/IMOREDDKP5U5BN5SW6"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G_44e5t0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--wJV5tdzk--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aa8th61p8osw2k98e3vo.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Data Types and Operators in JavaScript: Everything You Need To Know</title>
      <author>Joel P. Mugalu</author>
      <pubDate>Mon, 24 Aug 2020 14:07:41 +0000</pubDate>
      <link>https://dev.to/codingknite/data-types-and-operators-in-javascript-everything-you-need-to-know-ah1</link>
      <guid>https://dev.to/codingknite/data-types-and-operators-in-javascript-everything-you-need-to-know-ah1</guid>
      <description>&lt;p&gt;According to &lt;a href="https://en.wikipedia.org/wiki/Data_type"&gt;Wikipedia&lt;/a&gt;: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A data type or simply type is an attribute of data which tells the compiler or interpreter how the programmer intends to use the data. This data type defines the operations that can be done on the data, the meaning of the data, and the way values of that type can be stored.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In simple terms a data type is a type of value.  A data type tells the programming language how the value is meant to be used and the operations that can be carried out on it.&lt;/p&gt;

&lt;p&gt;In this article we are going to explore all the details of different data types in JavaScript and the operations that can be carried out on them. This is an in depth article so you might want to grab a pen and paper.&lt;/p&gt;

&lt;p&gt;JavaScript has two main types of data types: primitive data types and objects. Let's explore both of them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#primitive-data-types" class="anchor"&gt;
  &lt;/a&gt;
  Primitive Data Types
&lt;/h1&gt;

&lt;p&gt;A primitive data type can be understood  as a basic data type in JavaScript. Some primitive data types only accept a set value(s) and others accept certain type of values.Primitive data types are immutable. That means their values cannot be changed or mutated. I'll further explain this in the article.&lt;br&gt;
Let's look at the primitive data types in JavaScript.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#numbers" class="anchor"&gt;
  &lt;/a&gt;
  Numbers
&lt;/h2&gt;

&lt;p&gt;Values of the number type are numeric values written as usual numbers like &lt;code&gt;12&lt;/code&gt;, &lt;code&gt;67&lt;/code&gt; and &lt;code&gt;85&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;JavaScript uses 64 bits to store a number. Given 64 bits JavaScript can represent up to &lt;strong&gt;18  quintillion&lt;/strong&gt;  numbers. You don't have to remember that number. The point is we can write very huge numbers with JavaScript.&lt;/p&gt;

&lt;p&gt;All operations carried out on whole numbers are guaranteed to be precise and accurate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//79&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1234597654&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;987654132476&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//988888730130&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Sadly that is not the case with floating point numbers. In JavaScript floating point numbers are numbers that have decimal points.&lt;br&gt;
Take a look at this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//0.30000000000000004&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Looking at the example you would expect that adding &lt;code&gt;0.1 + 0.2&lt;/code&gt; would result in &lt;code&gt;0.3&lt;/code&gt;. Instead we get &lt;code&gt;0.30000000000000004&lt;/code&gt;. Why is that?&lt;/p&gt;

&lt;p&gt;In real math we have an infinite set of numbers to work with. In JavaScript we only have 64 bits (18 quintillion numbers). Therefore we cannot precisely represent floating point numbers with only 64 bits. When you add &lt;code&gt;0.1 + 0.2&lt;/code&gt; JavaScript returns the closest available number. This doesn't need to get you worried unless you want to calculate the precise age of the universe.&lt;/p&gt;

&lt;p&gt;Let's look at the operations we can carry out on numbers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arithmetic-operations" class="anchor"&gt;
  &lt;/a&gt;
  Arithmetic Operations
&lt;/h3&gt;

&lt;p&gt;You've probably guessed already that we can carry out arithmetic operations on numbers in JavaScript.&lt;/p&gt;

&lt;p&gt;Just like usual math we can add, subtract, multiply and divide numbers. The symbols used to carry out these operations are called operators. The &lt;code&gt;+&lt;/code&gt; operator is used for addition, &lt;code&gt;-&lt;/code&gt; for subtraction, &lt;code&gt;*&lt;/code&gt; for multiplication and &lt;code&gt;/&lt;/code&gt; for division.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//5 &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//200&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//60&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;However, when working with operators we must look out for something called &lt;strong&gt;operator precedence.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://developer.mozilla.org/en-US/"&gt;Mozilla Developer Network&lt;/a&gt; (MDN):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Operator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's look at this code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Operations in JavaScript do not occur from left to right. Rather some operators take precedence over others. So &lt;code&gt;2 + 2 * 10&lt;/code&gt; is not &lt;code&gt;4 * 10 = 40&lt;/code&gt; but &lt;code&gt;2 + 20 = 22&lt;/code&gt; because &lt;code&gt;*&lt;/code&gt; has a higher precedence than &lt;code&gt;+&lt;/code&gt; so that operation happens first.&lt;/p&gt;

&lt;p&gt;If you would like to carry out arithmetic operations left to right, you can do so with parenthesis.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;You can read more about operator precedence &lt;a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Operator_Precedence"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#special-numbers" class="anchor"&gt;
  &lt;/a&gt;
  Special Numbers
&lt;/h3&gt;

&lt;p&gt;As it turns out, not all numbers have a numeric value in JavaScript. JavaScript has three special numbers. Infinity for positive infinities, -Infinity for negative infinities and NaN which means "Not a Number".&lt;br&gt;
These special numbers are used to represent foul operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Infinity&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//-Infinity&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;NaN is of special interest because it's quite the trouble causer. It's a number that means "Not A Number". This can be very confusing at times. &lt;/p&gt;

&lt;p&gt;According to MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are five different types of operations that return NaN:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Number cannot be parsed (e.g. parseInt("blabla") or Number(undefined))&lt;/li&gt;
&lt;li&gt;Math operation where the result is not a real number (e.g. Math.sqrt(-1))&lt;/li&gt;
&lt;li&gt;Operand of an argument is NaN (e.g. 7 ** NaN)&lt;/li&gt;
&lt;li&gt;Indeterminate form (e.g. 0 * Infinity)&lt;/li&gt;
&lt;li&gt;Any operation that involves a string and is not an addition operation (e.g. "foo"/3)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can test for NaN using the method &lt;code&gt;Number.isNaN(number)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So, simply put NaN is a numeric value that represents an invalid result.&lt;/p&gt;

&lt;p&gt;Let's look at another data type.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strings" class="anchor"&gt;
  &lt;/a&gt;
  Strings
&lt;/h2&gt;

&lt;p&gt;A string is another data type in JavaScript. Strings represent text. This text can be enclosed in either single quotes &lt;code&gt;''&lt;/code&gt;, double quotes &lt;code&gt;""&lt;/code&gt; or back ticks &lt;code&gt;(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is also text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Interestingly though, strings are not just text in JavaScript. Behind the scenes each letter in a string is a number. If you've ever heard of the ASCII standard then this is it. Each character in a computer has a number assigned to it. For example lower case a is 65 and uppercase A is 97. Same with all the other letters and characters.&lt;/p&gt;

&lt;p&gt;However, the ASCII standard was limited in the number of characters it could represent. This led to the birth of the Unicode standard. With the Unicode standard, just about any character can be represented with a number. Even Emojis. That was just an interesting fact.&lt;/p&gt;

&lt;p&gt;We can't carry out subtraction, multiplication and division on strings. Doing so would yield to &lt;code&gt;NaN&lt;/code&gt; which we just talked about.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Arithmetic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;But, we can use the addition operator on strings. This is called string concatenation. This way we can join two strings into one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Yes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; Concatenation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Yes Concatenation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;We can also use bracket notation to access individual characters in a string. But we cannot change these characters. As I mentioned earlier this is because primitive data types are immutable. If we try to mutate strings, JavaScript will throw an error if in &lt;a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Strict_mode"&gt;strict mode&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myUsername&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;codingknite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myUsername[0]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//c&lt;/span&gt;
&lt;span class="nx"&gt;myUsername&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;k&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Throws error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#boolean" class="anchor"&gt;
  &lt;/a&gt;
  Boolean
&lt;/h2&gt;

&lt;p&gt;Boolean is another data type in JavaScript with only two values written as &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. Logical operations can be carried out with Boolean. Think of boolean as answers to yes or no questions that we ask JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//false &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;There's quite a number of operators we can use to carry out operations on boolean.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#equality-operators" class="anchor"&gt;
  &lt;/a&gt;
  Equality Operators
&lt;/h3&gt;

&lt;p&gt;Equality operators are used to compare whether or not two values are equal to each other. The result is a boolean value.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The (==) operator denotes "equal to"&lt;/li&gt;
&lt;li&gt;The (!=) operator denotes "not equal to"&lt;/li&gt;
&lt;li&gt;The (===) operator denotes "strictly equal to"&lt;/li&gt;
&lt;li&gt;The (!==) operator denotes "strictly not equal to"
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//True &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pineapple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Java&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;There is one value in JavaScript which in not equal to itself. And it's none other than NaN&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;NaN&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//false &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;According to MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Unlike all other possible values in JavaScript, it is not possible to rely on the equality operators (== and ===) to determine whether a value is NaN or not, because both NaN == NaN and NaN === NaN evaluate to false. Hence, the necessity of an isNaN function.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The issue with NaN not being equal to NaN is historical. Just Accept it as a fact of life. If you're interested in reading more about NaN and why it's not equal to itself, consider reading this &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN"&gt;article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a one difference between the equality operator and the strict equality operator which i'll get to in a second.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comparison-operators" class="anchor"&gt;
  &lt;/a&gt;
  Comparison Operators
&lt;/h3&gt;

&lt;p&gt;Comparison operators are used to compare two or more values. The result is either of the boolean values.&lt;/p&gt;

&lt;p&gt;These are the most common comparison operators.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The ( &amp;gt; ) operator is used to denote "greater than" &lt;/li&gt;
&lt;li&gt;The ( &amp;lt; ) operator is used to denote "less than"
console.log(5 &amp;gt; 3) //true 
console.log(10 &amp;lt; 15) //false&lt;/li&gt;
&lt;li&gt;The ( &amp;gt;= ) operator denotes "greater than or equal to"&lt;/li&gt;
&lt;li&gt;The ( &amp;lt;= ) operator denotes "less than or equal to"&lt;/li&gt;
&lt;li&gt;The ( == ) operator denotes "equal to"&lt;/li&gt;
&lt;li&gt;The ( === ) operator denotes "strictly equal to"&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#logical-operators" class="anchor"&gt;
  &lt;/a&gt;
  Logical Operators
&lt;/h3&gt;

&lt;p&gt;Logical Operators are used to compare two conditions. JavaScript has three main logical operators.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#and-operator" class="anchor"&gt;
  &lt;/a&gt;
  AND Operator
&lt;/h4&gt;

&lt;p&gt;The AND operator written as &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; compares two values and returns true if both values on the left and right equate to true. Otherwise is returns false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#or-operator" class="anchor"&gt;
  &lt;/a&gt;
  OR Operator
&lt;/h4&gt;

&lt;p&gt;The OR operator written as &lt;code&gt;||&lt;/code&gt; compares two values and returns true if either value on the left or right equates to true. Otherwise it returns false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#not-operator" class="anchor"&gt;
  &lt;/a&gt;
  NOT Operator
&lt;/h4&gt;

&lt;p&gt;The NOT operator written as &lt;code&gt;!&lt;/code&gt; flips any value given to it. In other words !true becomes false and !false becomes true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pineapple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//true &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#automatic-type-coercion" class="anchor"&gt;
  &lt;/a&gt;
  Automatic Type Coercion
&lt;/h3&gt;

&lt;p&gt;When JavaScript receives the wrong values, it changes the data type of the resulting value.&lt;/p&gt;

&lt;p&gt;Let's Look at some code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//36&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;50&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//38&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//13&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Thirteen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//NaN&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;As we see in the code above JavaScript secretly changes the types when it receives unusual values. The string '3' on the first line becomes the number 3. Same as the string "50". On the third line &lt;code&gt;true&lt;/code&gt; becomes 1 and &lt;code&gt;false&lt;/code&gt; becomes 0.&lt;/p&gt;

&lt;p&gt;Type coercion is what creates the difference between the equality operator and the strict equality operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//true &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;The equality operator carries out type coercion on the values it receives where as the strict operator does not carry out type coercion. This is why most JavaScript developers consider it a good practice to use the strict equality operator. To avoid unnecessary type coercion.&lt;/p&gt;

&lt;p&gt;Let's now look at the last two primitive data types&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#null" class="anchor"&gt;
  &lt;/a&gt;
  Null
&lt;/h2&gt;

&lt;p&gt;Null is a primitive data type in JavaScript used to represent an intentionally missing value. Null has only one value and that is &lt;code&gt;null&lt;/code&gt;. Null is a falsy value because it returns false in all boolean operations&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#undefined" class="anchor"&gt;
  &lt;/a&gt;
  Undefined
&lt;/h2&gt;

&lt;p&gt;Undefined is also a primitive data type in JavaScript and just like Null it has only one value &lt;code&gt;undefined&lt;/code&gt;. It represents an unintentionally missing value. Undefined is also considered a falsy value because it returns false in boolean operations. When comparing &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; it's very important to look out for the equality and strict equality operators.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;There you have it. These are the primitive data types in JavaScript. But that's not all.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#truthy-and-falsy-values" class="anchor"&gt;
  &lt;/a&gt;
  Truthy and Falsy Values
&lt;/h3&gt;

&lt;p&gt;Falsy values are values that are return false in a condition.&lt;br&gt;
JavaScript has 5 basic falsy value: &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Truthy values are all the other values that are !falsy values (&amp;gt;_-)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Age is defined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Age is not defined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// returns 'Age is defined';&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Try to figure out why the above code logs 'Age is defined'&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unary-operator" class="anchor"&gt;
  &lt;/a&gt;
  Unary Operator
&lt;/h3&gt;

&lt;p&gt;A Unary operator is an operator that accepts only one value.&lt;/p&gt;

&lt;p&gt;The best example of a unary operator is the &lt;code&gt;typeof&lt;/code&gt; operator which returns the type of value specified. In fact we can use this operator to check out all the data types we've talked about.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//string&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//number&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//boolean&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//boolean&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//object&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;If you noticed, the typeof null returned object. I will explain why that is so in the next article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#binary-operators" class="anchor"&gt;
  &lt;/a&gt;
  Binary Operators
&lt;/h3&gt;

&lt;p&gt;Binary Operators are operators that carry out operations on two values&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ternary-operator" class="anchor"&gt;
  &lt;/a&gt;
  Ternary Operator
&lt;/h3&gt;

&lt;p&gt;The ternary operator is used to check a condition and return a value based on whether or not the condition is true. It's like a quick if statement.&lt;/p&gt;

&lt;p&gt;The basic frame of a ternary operator is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;condition&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Let's look at this code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;15 is greater than 12&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;15 is less than 12&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 15 is greater than 12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Well, that's everything you need to know about primitive data types.&lt;br&gt;
What is the second type of data types in JavaScript? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objects-and-functions" class="anchor"&gt;
  &lt;/a&gt;
  Objects and Functions
&lt;/h2&gt;

&lt;p&gt;Now i don't know about you but that's enough data types for one day. In my next article am going to talk about objects and everything you need to know about them. So stay tuned. &lt;/p&gt;

&lt;p&gt;However, if you're interested I've written a blog post on functions. You can check it out &lt;a href="https://dev.to/codingknite/javascript-functions-broken-down-4fgh"&gt;here&lt;/a&gt; if you wish.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  SUMMARY
&lt;/h2&gt;

&lt;p&gt;So, what have we seen.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A data type is basically the way a programming language understands the data it receives telling it how the data is to be used.&lt;/li&gt;
&lt;li&gt;Operations are basically the way we use the data received
*There are two types of data types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Primitive Data Types&lt;/strong&gt;&lt;br&gt;
There are five main primitive data types&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Numbers&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Numeric Values &lt;/li&gt;
&lt;li&gt;Arithmetic operations like Addition, Subtraction,     Multiplication and division can be carried out on them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Strings&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How text is represented &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;+&lt;/code&gt; can be used on them for concatenation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Boolean&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Used for logical operations
-Two values written as true and false&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Null&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intentionally missing values&lt;/li&gt;
&lt;li&gt;Only one value null&lt;/li&gt;
&lt;li&gt;Falsy value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Undefined&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unintentionally missing values&lt;/li&gt;
&lt;li&gt;Only one value undefined &lt;/li&gt;
&lt;li&gt;Also a falsy value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed this article. If you would like to follow my coding journey and be the first to know when I release a new article, be sure to follow me on &lt;a href="https://twitter.com/codingknite"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Python libraries to make your code readable, reliable and maintainable</title>
      <author>L√≠ki√∞ Geimfari</author>
      <pubDate>Mon, 24 Aug 2020 13:40:35 +0000</pubDate>
      <link>https://dev.to/likid_geimfari/python-libraries-to-make-your-code-readable-reliable-and-maintainable-3p9l</link>
      <guid>https://dev.to/likid_geimfari/python-libraries-to-make-your-code-readable-reliable-and-maintainable-3p9l</guid>
      <description>&lt;p&gt;Experienced programmers understand perfectly well that in development they spend most of the time reading code and therefore they treat the process of writing code with the deepest trepidation (and sometimes with fanaticism). To write quality and maintainable code, you need to take the time to write tests and integrate QA tools. There is a whole technique aimed at test-driven development (&lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;TDD&lt;/a&gt;) and I will not devote this article to the topic of testing as such. Tests are absolutely necessary and there is nothing to discuss. In this article, we are going to talk about tools that help you write quality Python code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-frameworks" class="anchor"&gt;
  &lt;/a&gt;
  Testing Frameworks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/pytest-dev/pytest/"&gt;&lt;strong&gt;pytest&lt;/strong&gt;&lt;/a&gt; is a framework that makes it easy to write small tests, yet scales to support complex functional testing for applications and libraries. &lt;/p&gt;

&lt;p&gt;Features&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Detailed info on failing assert statements (no need to remember self.assert* names);&lt;/li&gt;
&lt;li&gt;Auto-discovery of test modules and functions;&lt;/li&gt;
&lt;li&gt;Modular fixtures for managing small or parametrized long-lived test resources;&lt;/li&gt;
&lt;li&gt;Can run &lt;code&gt;unittest&lt;/code&gt; (including trial) and nose test suites out of the box;&lt;/li&gt;
&lt;li&gt;Python 3.5+ and PyPy 3;&lt;/li&gt;
&lt;li&gt;Rich plugin architecture, with over 315+ external plugins and thriving community;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Repository: &lt;a href="https://github.com/pytest-dev/pytest/"&gt;https://github.com/pytest-dev/pytest/&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;a href="https://github.com/HypothesisWorks/hypothesis"&gt;&lt;strong&gt;Hypothesis&lt;/strong&gt;&lt;/a&gt;  is a family of testing libraries that let you write tests parametrized by a source of examples. A Hypothesis implementation then generates simple and comprehensible examples that make your tests fail. This simplifies writing your tests and makes them more powerful at the same time, &lt;br&gt;
by letting software automate the boring bits and do them to a higher standard than a human would, freeing you to focus on the higher-level test logic.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://github.com/robotframework/robotframework"&gt;&lt;strong&gt;Robot Framework&lt;/strong&gt;&lt;/a&gt; is a generic open-source automation framework for acceptance testing, acceptance test-driven development (ATDD), and robotic process automation (RPA). It has simple plain text syntax and it can be extended easily with libraries implemented using Python or Java.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#test-runners" class="anchor"&gt;
  &lt;/a&gt;
  Test Runners
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/tox-dev/tox"&gt;&lt;strong&gt;tox&lt;/strong&gt;&lt;/a&gt; is a command-line driven CI frontend and development task automation tool.&lt;/p&gt;

&lt;p&gt;tox creates virtual environments for all configured so-called &lt;code&gt;testenvs&lt;/code&gt;, it then installs the project and other necessary dependencies and runs the configured set of commands:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PtE2W1q3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1598270513268/Q1-E6b6nw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PtE2W1q3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1598270513268/Q1-E6b6nw.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#e2e-testing-gui-frontend" class="anchor"&gt;
  &lt;/a&gt;
  E2E Testing (GUI / Frontend)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/SeleniumHQ/selenium/"&gt;&lt;strong&gt;Selenium&lt;/strong&gt;&lt;/a&gt; is an umbrella project encapsulating a variety of tools and libraries enabling web browser automation. Selenium specifically provides an infrastructure for the W3C WebDriver specification ‚Äî a platform and language-neutral coding interface compatible with all major web browsers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/locustio/locust"&gt;&lt;strong&gt;Locust&lt;/strong&gt;&lt;/a&gt; is an easy to use, scriptable, and scalable performance testing tool. You define the behavior of your users in regular Python code, instead of using a clunky UI or domain-specific language. This makes Locust infinitely expandable and very developer-friendly.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://github.com/DevExpress/testcafe"&gt;&lt;strong&gt;TestCafe&lt;/strong&gt;&lt;/a&gt; is a Node.js tool to automate end-to-end web testing. Write &lt;br&gt;
tests in JS or TypeScript, run them and view results.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Works on all popular environments&lt;/strong&gt;: TestCafe runs on Windows, MacOS, and Linux. It supports desktop, mobile, remote and cloud &lt;a href="https://devexpress.github.io/testcafe/documentation/using-testcafe/common-concepts/browsers/browser-support.html"&gt;browsers&lt;/a&gt; (UI or headless).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;1 minute to set up&lt;/strong&gt;: You &lt;a href="https://devexpress.github.io/testcafe/faq/#i-have-heard-that-testcafe-does-not-use-selenium-how-does-it-operate"&gt;do not need WebDriver&lt;/a&gt; or any other testing software. Install TestCafe with one command, and you are ready to test: &lt;code&gt;npm install -g testcafe&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Free and open source&lt;/strong&gt;: TestCafe is free to use under the &lt;a href="https://github.com/DevExpress/testcafe/blob/master/LICENSE"&gt;MIT license&lt;/a&gt;. &lt;a href="#plugins"&gt;Plugins&lt;/a&gt; provide custom reports, integration with other tools, launching tests from IDE, etc. You can use the plugins made by the GitHub community or make your own.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usage example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pndISdgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/DevExpress/testcafe/master/media/install-and-run-test.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pndISdgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/DevExpress/testcafe/master/media/install-and-run-test.gif" alt="Install TestCafe and Run a Test"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;a href="https://github.com/asweigart/pyautogui"&gt;&lt;strong&gt;PyAutoGUI&lt;/strong&gt;&lt;/a&gt; is a cross-platform GUI automation Python module for human beings. Used to programmatically control the mouse &amp;amp; keyboard.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#fake-data" class="anchor"&gt;
  &lt;/a&gt;
  Fake Data
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/lk-geimfari/mimesis"&gt;&lt;strong&gt;Mimesis&lt;/strong&gt;&lt;/a&gt; is a high-performance fake data generator for Python, which&lt;br&gt;
provides data for a variety of purposes in a variety of languages. The fake data could be used to populate a testing database, create fake API endpoints, create JSON and XML files of arbitrary structure, anonymize data taken from production and etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/lk-geimfari/mimesis"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V5fZ498B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/lk-geimfari/mimesis/master/media/readme-logo.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The key features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Performance&lt;/strong&gt;: The &lt;a href="https://mimesis.name/foreword.html#performance"&gt;fastest&lt;/a&gt; data generator available for Python.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Extensibility&lt;/strong&gt;: You can create your own data providers and use them with Mimesis.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Generic data provider&lt;/strong&gt;: The &lt;a href="https://mimesis.name/getting_started.html#generic-provider"&gt;simplified&lt;/a&gt; access to all the providers from a single object.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Multilingual&lt;/strong&gt;: Supports data for &lt;a href="https://mimesis.name/getting_started.html#locales"&gt;a lot of languages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Data variety&lt;/strong&gt;: Supports &lt;a href="https://mimesis.name/api.html"&gt;a lot of data providers&lt;/a&gt; for a variety of purposes.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Schema-based generators&lt;/strong&gt;: Provides an easy mechanism to generate data by the schema of any complexity.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Country-specific data providers&lt;/strong&gt;: Provides data specific only for &lt;a href="https://mimesis.name/api.html#builtin-data-providers"&gt;some countries&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mimesis&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;full_name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s"&gt;'Brande Sears'&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'mimesis.name'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="s"&gt;'roccelline1878@mimesis.name'&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'mimesis.name'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;'f272a05d39ec46fdac5be4ac7be45f3f@mimesis.name'&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;telephone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'1-4##-8##-5##3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;'1-436-896-5213'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Generating data using schemas:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mimesis.schema&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Schema&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mimesis.enums&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Gender&lt;/span&gt;

&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'uuid'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'text.word'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s"&gt;'version'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'version'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pre_release&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s"&gt;'timestamp'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'timestamp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;posix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s"&gt;'owner'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'person.email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;domains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'test.com'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'token'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'token_hex'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'creator'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'full_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Gender&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FEMALE&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;The result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'bd69b0b1-ac7f-42a7-a6b7-0fe04e8847d3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'certified'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'owner'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s"&gt;'creator'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Dorthey Ramsey'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'birretta1894@test.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s"&gt;'token'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'9cddc4363819109adf4a3cc0065bfdb8c38c5ce8244af4da68e75a45cf5bdc12'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;'timestamp'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'2005-04-18T13:09:37Z'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'version'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'9.9.0-rc.7'&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#mocking" class="anchor"&gt;
  &lt;/a&gt;
  Mocking
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/spulec/freezegun"&gt;&lt;strong&gt;FreezeGun&lt;/strong&gt;&lt;/a&gt; is a library that allows your Python tests to travel through time by mocking the &lt;code&gt;datetime&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;Once the decorator or context manager have been invoked, all calls to &lt;code&gt;datetime.datetime.now()&lt;/code&gt;, &lt;code&gt;datetime.datetime.utcnow()&lt;/code&gt;, &lt;code&gt;datetime.date.today()&lt;/code&gt;, &lt;code&gt;time.time()&lt;/code&gt;, &lt;code&gt;time.localtime()&lt;/code&gt;, &lt;code&gt;time.gmtime()&lt;/code&gt;, and &lt;code&gt;time.strftime()&lt;/code&gt; will return the time that has been frozen.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://github.com/patrys/httmock"&gt;&lt;strong&gt;HTTPretty&lt;/strong&gt;&lt;/a&gt; is an HTTP client mocking tool for Python - inspired by Fakeweb for Ruby.&lt;/p&gt;

&lt;p&gt;Common use cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Test-driven development of API integrations&lt;/li&gt;
&lt;li&gt;Fake responses of external APIs&lt;/li&gt;
&lt;li&gt;Record and playback HTTP requests&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a href="https://github.com/getsentry/responses"&gt;&lt;strong&gt;responses&lt;/strong&gt;&lt;/a&gt; is a utility library for mocking out the requests Python library.&lt;/p&gt;

&lt;p&gt;Example of usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import responses
import requests

@responses.activate
def test_simple():
    responses.add(responses.GET, 'http://twitter.com/api/1/foobar',
                  json={'error': 'not found'}, status=404)

    resp = requests.get('http://twitter.com/api/1/foobar')

    assert resp.json() == {"error": "not found"}

    assert len(responses.calls) == 1
    assert responses.calls[0].request.url == 'http://twitter.com/api/1/foobar'
    assert responses.calls[0].response.text == '{"error": "not found"}'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#code-coverage" class="anchor"&gt;
  &lt;/a&gt;
  Code coverage
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/nedbat/coveragepy"&gt;Coverage.py&lt;/a&gt; measures code coverage, typically during test execution. It uses the code analysis tools and tracing hooks provided in the Python standard library to determine which lines are executable, and which have been executed.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#object-factories" class="anchor"&gt;
  &lt;/a&gt;
  Object Factories
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/FactoryBoy/factory_boy"&gt;&lt;strong&gt;factory_boy&lt;/strong&gt;&lt;/a&gt; is a fixtures replacement based on thoughtbot's factory_bot.&lt;/p&gt;

&lt;p&gt;As a fixtures replacement tool, it aims to replace static, hard to maintain fixtures with easy-to-use factories for complex objects.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#code-style" class="anchor"&gt;
  &lt;/a&gt;
  Code Style
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/wemake-services/wemake-python-styleguide"&gt;&lt;strong&gt;wemake-python-styleguide&lt;/strong&gt;&lt;/a&gt; is actually a flake8 plugin with some other plugins as dependencies.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://github.com/PyCQA/pycodestyle"&gt;&lt;strong&gt;pycodestyle&lt;/strong&gt;&lt;/a&gt; is a tool to check your Python code against some of the style conventions in PEP8.&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Plugin architecture: Adding new checks is easy.&lt;/li&gt;
&lt;li&gt;Parseable output: Jump to error location in your editor.&lt;/li&gt;
&lt;li&gt;Small: Just one Python file, requires only &lt;code&gt;stdlib&lt;/code&gt;. You can use just the &lt;code&gt;pycodestyle.py&lt;/code&gt; file for this purpose.&lt;/li&gt;
&lt;li&gt;Comes with a comprehensive test suite.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a href="https://github.com/psf/black"&gt;&lt;strong&gt;Black&lt;/strong&gt;&lt;/a&gt; is the uncompromising Python code formatter. By using it, you agree to cede control over minutiae of hand-formatting. In return, &lt;em&gt;Black&lt;/em&gt; gives you speed, determinism, and freedom from &lt;code&gt;pycodestyle&lt;/code&gt; nagging about formatting. You will save time and mental energy for more important matters.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#typing" class="anchor"&gt;
  &lt;/a&gt;
  Typing
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/python/mypy"&gt;&lt;strong&gt;mypy&lt;/strong&gt;&lt;/a&gt; is an optional static type checker for Python. You can add type hints (PEP 484) to your Python programs, and use &lt;code&gt;mypy&lt;/code&gt; to type check them statically. Find bugs in your programs without even running them!&lt;/p&gt;

&lt;p&gt;Here is a small example to whet your appetite (Python 3):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from typing import Iterator

def fib(n: int) -&amp;gt; Iterator[int]:
    a, b = 0, 1
    while a &amp;lt; n:
        yield a
        a, b = b, a + b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;





&lt;p&gt;&lt;a href="https://github.com/facebook/pyre-check"&gt;&lt;strong&gt;Pyre&lt;/strong&gt;&lt;/a&gt; is a performant type checker for Python compliant with PEP 484. &lt;br&gt;
Pyre can analyze codebases with millions of lines of code incrementally ‚Äì providing instantaneous feedback to developers as they write code.&lt;/p&gt;

&lt;p&gt;Pyre ships with Pysa, a security-focused static analysis tool we've built on top of Pyre that reasons about data flows in Python applications. Please refer to our documentation to get started with our security analysis.&lt;/p&gt;

&lt;p&gt;Repository: &lt;a href="https://github.com/facebook/pyre-check"&gt;https://github.com/facebook/pyre-check&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;a href="https://github.com/python/typeshed"&gt;&lt;strong&gt;Typeshed&lt;/strong&gt;&lt;/a&gt; contains external type annotations for the Python standard library &lt;br&gt;
and Python builtins, as well as third party packages as contributed by people external to those projects.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://github.com/typeddjango/django-stubs"&gt;&lt;strong&gt;django-stubs&lt;/strong&gt;&lt;/a&gt; contains type stubs and a custom &lt;code&gt;mypy&lt;/code&gt; plugin to provide more precise static types and type inference for &lt;code&gt;Django&lt;/code&gt; framework. Django uses some Python "magic" &lt;br&gt;
that makes having precise types for some code patterns problematic. This is why we need this project. The final goal is to be able to get precise types for most common patterns.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://github.com/dry-python/returns"&gt;&lt;strong&gt;returns&lt;/strong&gt;&lt;/a&gt; gonna make your functions return something meaningful, typed, and safe!&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Brings functional programming to Python land&lt;/li&gt;
&lt;li&gt;Provides a bunch of primitives to write declarative business logic&lt;/li&gt;
&lt;li&gt;Enforces better architecture&lt;/li&gt;
&lt;li&gt;Fully typed with annotations and checked with &lt;code&gt;mypy&lt;/code&gt;, PEP561 compatible&lt;/li&gt;
&lt;li&gt;Adds emulated Higher Kinded Types support&lt;/li&gt;
&lt;li&gt;Has a bunch of helpers for better composition&lt;/li&gt;
&lt;li&gt;Pythonic and pleasant to write and to read üêç&lt;/li&gt;
&lt;li&gt;Support functions and coroutines, framework agnostic&lt;/li&gt;
&lt;li&gt;Easy to start: has lots of docs, tests, and tutorials&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;That's it for now!&lt;/p&gt;

&lt;p&gt;You can read more in my personal blog: &lt;strong&gt;&lt;a href="https://isaak.dev"&gt;https://isaak.dev&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitter: &lt;a href="https://twitter.com/likid_geimfari"&gt;https://twitter.com/likid_geimfari&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;GitHub: &lt;a href="https://github.com/lk-geimfari"&gt;https://github.com/lk-geimfari&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Telegram: &lt;a href="https://t.me/the_art_of_development"&gt;@the_art_of_development&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>testing</category>
      <category>beginners</category>
    </item>
    <item>
      <title>3 Tricks every Python programmer needs to know</title>
      <author>Gabriel Cruz (he/him)</author>
      <pubDate>Mon, 24 Aug 2020 13:26:08 +0000</pubDate>
      <link>https://dev.to/gmelodie/3-tricks-every-python-programmer-needs-to-know-n9c</link>
      <guid>https://dev.to/gmelodie/3-tricks-every-python-programmer-needs-to-know-n9c</guid>
      <description>&lt;p&gt;If you've never touched Python before or if you're just getting started, this post if for you. These are the things I simply can't live without being a Python programmer.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-using-python-3" class="anchor"&gt;
  &lt;/a&gt;
  1 - Using Python 3
&lt;/h1&gt;

&lt;p&gt;Don't use Python 2. Use Python 3.&lt;/p&gt;

&lt;p&gt;There's no secret here. Just don't use Python 2. &lt;/p&gt;

&lt;p&gt;Really, don't use it. Use Python 3.&lt;/p&gt;

&lt;p&gt;Got it? Use Python 3.&lt;/p&gt;

&lt;p&gt;No Python 2. Ever.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-reading-inputs" class="anchor"&gt;
  &lt;/a&gt;
  2 - Reading inputs
&lt;/h1&gt;

&lt;p&gt;So you're learning Python. What's the first thing that you learn? &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Hello World&lt;/code&gt;, okay. &lt;/p&gt;

&lt;p&gt;But what's the &lt;em&gt;second&lt;/em&gt; thing you learn? To me it's always summing up two integers. How do you do that in Python? Well, most people do something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;first_int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;second_int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_int&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;second_int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;For that code, the input would look like so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;12 # hit enter
3  # hit enter again
# output
15
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Ugh.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reading-two-strings-in-the-same-line" class="anchor"&gt;
  &lt;/a&gt;
  Reading two strings in the same line
&lt;/h2&gt;

&lt;p&gt;Forget about the last example for a bit. Let's say you want to do a code that gets two strings in one line and invert them like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# input
hello world # enter (in one single line)

# output
world hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;You could use &lt;code&gt;split&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;first_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;second_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# out: 'world hello'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Obs&lt;/strong&gt;: &lt;code&gt;split&lt;/code&gt; can also receive the delimiter characters as arguments. Let's say your strings are divided by a comma and a space like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hello, there
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;To split those you could use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;first_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;', '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;second_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;', '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# out: 'world, hello'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Mind the space on the &lt;code&gt;split&lt;/code&gt; argument: &lt;code&gt;split(', ')&lt;/code&gt;, not &lt;code&gt;split(',')&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variable-length-inputs" class="anchor"&gt;
  &lt;/a&gt;
  Variable length inputs
&lt;/h2&gt;

&lt;p&gt;In the last example we knew we were going to receive two strings as input. But what about when we don't know how many strings are there beforehand?&lt;/p&gt;

&lt;p&gt;Let's say we want to make our code invert the order of all strings passed in the input, no matter how many are there&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# input
hello darkness my old friend # hit enter
# output
friend old my darkness hello

# input
just three strings # hit enter
# output
strings three just
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;You can use &lt;a href="https://realpython.com/list-comprehension-python/"&gt;list comprehensions&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;all_strings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_strings&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# all_strings[::-1] inverts the list
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Going back to our first example (adding two integers), wouldn't it be better if we could pass in the two numbers in the same line?&lt;/p&gt;

&lt;p&gt;If you need to read numbers instead of strings, you can use &lt;a href="https://en.wikipedia.org/wiki/Type_conversion"&gt;type casting&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Mind the int(a) converting each string to int
&lt;/span&gt;&lt;span class="n"&gt;first_int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second_int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_int&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;second_int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Or convert to float
&lt;/span&gt;&lt;span class="n"&gt;first_float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second_float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_float&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;second_float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Now what if we wanted to sum up as many numbers as come in the input? Like so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# input
1 2
# output
3

# input
2 3 3 4
# output
12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;We read a list of integers and sum them up afterwards&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Mind the int(a) converting each string to int
&lt;/span&gt;&lt;span class="n"&gt;list_of_ints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_of_ints&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;This may also be useful in competitive programming or algorithm exercises when you have an input like &lt;code&gt;&amp;lt;number N&amp;gt; [list of N numbers]&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2 9 8       # input 1
3 1 2 3     # input 2
4 8 9 8 7   # input 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;As in Python you don't need to know the length of a list beforehand (you could just use &lt;code&gt;len(my_list)&lt;/code&gt;), you can discard the first number of the list using slices&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;list_of_ints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Or even &lt;code&gt;pop&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;list_of_ints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="n"&gt;list_of_ints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-files" class="anchor"&gt;
  &lt;/a&gt;
  3 - Files
&lt;/h1&gt;

&lt;p&gt;If you're familiar with the C API for handling files, Python will seem very similar, but with all the features you always wanted in C.&lt;/p&gt;

&lt;p&gt;First: opening, reading, writing, closing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Open test_file.txt for writing (w) using an absolute path
&lt;/span&gt;&lt;span class="n"&gt;some_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/home/gabriel/test_file.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Open test_file.txt for reading (r) using a relative path
&lt;/span&gt;&lt;span class="n"&gt;some_other_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'test_file.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Copy the content from some_other_file to some_file
&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;some_other_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;some_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Close files
&lt;/span&gt;&lt;span class="n"&gt;some_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;some_other_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Mind that, even though they seem like the same file, &lt;code&gt;some_other_file&lt;/code&gt; may not the same as &lt;code&gt;some_file&lt;/code&gt; because it's specified by a &lt;a href="https://en.wikipedia.org/wiki/Path_(computing)#Absolute_and_relative_paths"&gt;relative path instead of an absolute one&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A better way of doing the above, however, is to use &lt;a href="https://dbader.org/blog/python-context-managers-and-with-statement"&gt;context managers&lt;/a&gt;, more specifically a &lt;code&gt;with&lt;/code&gt; statement&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/home/gabriel/test_file.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;some_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \      
     &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'test_file.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;some_other_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="c1"&gt;# Copy the content from some_other_file to some_file
&lt;/span&gt;    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;some_other_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;some_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;With that, you don't need to remind yourself of closing the file, the context manager does that for you when the &lt;code&gt;with&lt;/code&gt; statement finishes.&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>HTML Web Workers in Depth</title>
      <author>ANISHA SWAIN</author>
      <pubDate>Mon, 24 Aug 2020 13:15:03 +0000</pubDate>
      <link>https://dev.to/anishaswain/html-web-workers-in-depth-3nln</link>
      <guid>https://dev.to/anishaswain/html-web-workers-in-depth-3nln</guid>
      <description>&lt;h3&gt;
  &lt;a href="#javascript-running-in-the-background-without-affecting-the-performance-of-the-page" class="anchor"&gt;
  &lt;/a&gt;
  JavaScript running in the background, without affecting the performance of the page.
&lt;/h3&gt;

&lt;p&gt;Are you a person who just started with HTML/CSS or someone who wants to have an in-depth knowledge of the advanced features of HTML? Then you are in the right place. So grab a cup of coffee and enjoy the first part of our HTML series, HTML Web Workers in Depth.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem" class="anchor"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;Consider a situation where you need to handle UI events or a query that processes large amounts of API data or manipulates the DOM. What does your JavaScript do then? JavaScript will hang the browser if the CPU utilization is very high. JS runs in a single-threaded environment which means multiple scripts cannot run at the same time. So that means function &lt;em&gt;B&lt;/em&gt; cannot be executed until function &lt;em&gt;A&lt;/em&gt; is finished. meanwhile, during this process, the HTML page becomes unresponsive until the script is finished.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;*We can mimic the ‚Äòconcurrency‚Äô concept by using techniques like **setTimeout(), setInterval(), XMLHttpRequest **and event handlers. All of these features run asynchronously and doesn‚Äôt block anything but these doesn't necessarily mean concurrency.&lt;/strong&gt;*&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#wiki-concurrency-is-the-ability-of-different-parts-or-units-of-a-program-algorithm-or-problem-to-be-executed-outoforder-or-in-a-partial-order-without-affecting-the-final-outcome" class="anchor"&gt;
  &lt;/a&gt;
  wiki: concurrency is the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in a partial order, without affecting the final outcome*.*
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#solution" class="anchor"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;And there comes web worker to the rescue! A web worker is a JS script that runs in the background in a separate thread i.e. it runs independently of other scripts, without affecting the performance of the page. We can continue to do browsing, mouse events etc. uninterrupted, while the web worker runs long scripts in the background. This results in the web page being responsive.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note: Even though, Web Workers are relatively heavy-weight background scripts, they are not intended to be used in large numbers.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KGCghvcI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AA1MRiAuKKB7zsC1Dt0vgJA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KGCghvcI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AA1MRiAuKKB7zsC1Dt0vgJA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-to-use-javascript-web-workers" class="anchor"&gt;
  &lt;/a&gt;
  Why to use JavaScript Web Workers?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Can utilize parallel programming to perform multiple operations simultaneously&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can create background threads that are separate from the main execution thread&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can run expensive operations within an isolated thread hence increasing responsiveness and speed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web-workers are the kernel-level thread.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web-workers requires more space and CPU time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web-worker executes codes on the client-side (not server-side).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web worker threads communicate with each other using &lt;code&gt;postMessage()&lt;/code&gt; callback method to get notified upon script completion&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#types-of-web-workers-dedicated-and-shared-workers" class="anchor"&gt;
  &lt;/a&gt;
  Types of Web Workers (Dedicated and Shared Workers)
&lt;/h2&gt;

&lt;p&gt;In HTML5 Web Workers are of two types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dedicated Web Workers:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The dedicated worker can be accessed by only one script which has called it. The worker thread ends as its parent thread ends.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shared Web Workers:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The shared worker can be shared by multiple scripts and can communicate using a port. Shared workers can be accessed by different windows, iframes or workers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#a-dedicated-worker-is-only-accessible-from-the-script-that-first-spawned-it-whereas-shared-workers-can-be-accessed-from-multiple-scripts" class="anchor"&gt;
  &lt;/a&gt;
  A dedicated worker is only accessible from the script that first spawned it, whereas shared workers can be accessed from multiple scripts.
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-web-worker-file" class="anchor"&gt;
  &lt;/a&gt;
  Creating a Web Worker file:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-creating-an-action-to-start-web-worker" class="anchor"&gt;
  &lt;/a&gt;
  1. Creating an action to start Web Worker
&lt;/h3&gt;

&lt;p&gt;we need to get a trigger point to start the worker file (For example with a button click or with any other mouse event)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;!-- An action to start Web Worker --&amp;gt;
    &amp;lt;button onclick="startWorker()"&amp;gt;Start Worker&amp;lt;/button&amp;gt;

    &amp;lt;!-- An action to stop Web Worker --&amp;gt;
    &amp;lt;button onclick="stopWorker()"&amp;gt;Stop Worker&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-check-for-web-worker-availability" class="anchor"&gt;
  &lt;/a&gt;
  2. Check for Web Worker availability
&lt;/h3&gt;

&lt;p&gt;we can check the availability of the worker functionality by writing simple conditional statements like&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if(typeof(Worker) !== ‚Äúundefined‚Äù) {
    &amp;lt;!--    Start the Worker --&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#3-creating-a-web-worker-object-spawning-a-worker" class="anchor"&gt;
  &lt;/a&gt;
  3. Creating a Web Worker Object / Spawning a worker
&lt;/h3&gt;

&lt;p&gt;A worker is an object created using a constructor (e.g. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker"&gt;Worker()&lt;/a&gt;) that runs a specific JavaScript file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- creation of worker object --&amp;gt;
Worker(aURL, options);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#parameters" class="anchor"&gt;
  &lt;/a&gt;
  Parameters:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;aURL is a string that represents the URL of the script that we want the worker to execute.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;options is an object to customize the Worker instance. The available options are type, credentials, and name. However, we don‚Äôt necessarily need to specify them&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, if the specified javascript file exists, the browser will spawn a new worker thread, which will work asynchronously. If the path to the URL returns a 404 error, the worker will fail silently.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#listener-to-the-web-worker-onmessage-" class="anchor"&gt;
  &lt;/a&gt;
  Listener to the web worker (&lt;em&gt;onmessage( )&lt;/em&gt;)
&lt;/h2&gt;

&lt;p&gt;The main thread listens to the worker with onmessage event. The messages can be sent and received from different threads to each other. For example:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;!-- src/main.js --&amp;gt;
    const worker = new Worker("../src/worker.js");
    worker.onmessage = e =&amp;gt; {
       document.getElementById(‚Äúresult‚Äù).innerHTML = e.data;
    };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;From the main thread to worker thread:&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   &amp;lt;!-- src/main.js --&amp;gt;
    const worker = new Worker(‚Äú../src/worker.js‚Äù);

    &amp;lt;!-- recieve message from worker --&amp;gt;
    worker.onmessage = e =&amp;gt; {
     const message = e.data;
     console.log(`[From Worker]: ${message}`);
    };

    &amp;lt;!-- post message to worker --&amp;gt;
    worker.postMessage(‚ÄúMarco!‚Äù);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;From worker thread to main thread:&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;!-- src/worker.js --&amp;gt;
    onmessage = e =&amp;gt; {
      const message = e.data;
      console.log(`[From Main]: ${message}`);

    postMessage("Polo!");
    };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;So the result will be :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;!-- [From Main]: Marco! 
         [From Worker]: Polo! --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Sending messages between main and worker threads infinitely&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    // src/main.js

    const worker = new Worker(‚Äú../src/worker.js‚Äù);

    worker.onmessage = e =&amp;gt; {
     const message = e.data;
     console.log(`[From Worker]: ${message}`);

    const reply = setTimeout(() =&amp;gt; worker.postMessage(‚ÄúMarco!‚Äù), 3000);
    };

    worker.postMessage(‚ÄúMarco!‚Äù);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#full-example" class="anchor"&gt;
  &lt;/a&gt;
  Full Example:
&lt;/h2&gt;



&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;html lang="en"&amp;gt;
      &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Web Workers Demo&amp;lt;/title&amp;gt;
        &amp;lt;meta charset="UTF-8" /&amp;gt;
      &amp;lt;/head&amp;gt;

    &amp;lt;body&amp;gt;
        &amp;lt;div id="app"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;h1&amp;gt;Web Workers Demo: The Basics&amp;lt;/h1&amp;gt;
        &amp;lt;button onclick="startWorker()"&amp;gt;Start Worker&amp;lt;/button&amp;gt;
        &amp;lt;button onclick="stopWorker()"&amp;gt;Stop Worker&amp;lt;/button&amp;gt;

    &amp;lt;script src="src/main.js"&amp;gt;&amp;lt;/script&amp;gt;
      &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;

    //main.js

    function startWorker() {
     var w;

    if(typeof(Worker) !== ‚Äúundefined‚Äù) {
        if(typeof(w) == ‚Äúundefined‚Äù) {
          w = new Worker(‚Äúdemo_workers.js‚Äù);
        }
        w.onmessage = function(event) {
          document.getElementById(‚Äúresult‚Äù).innerHTML = event.data;
     };
     } else {
        document.getElementById(‚Äúresult‚Äù).innerHTML = ‚ÄúSorry, your       browser does not support Web Workers‚Ä¶‚Äù;
      }
    }

    function stopWorker() {
      w.terminate();
      w = undefined;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Once the Web Worker is spawned, communication between a web worker and its parent page is done using the &lt;strong&gt;postMessage()&lt;/strong&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    //workers.js (external javascript file)

    var i = 0;

    function timedCount() {
     i = i + 1;
     postMessage(i);
     setTimeout(‚ÄútimedCount()‚Äù,500);
    }

    timedCount();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: By using &lt;a href="https://www.bitdegree.org/learn/javascript-setinterval"&gt;setInterval()&lt;/a&gt; and &lt;a href="https://www.bitdegree.org/learn/javascript-settimeout"&gt;setTimeout()&lt;/a&gt; JavaScript functions also we can make web workers perform &lt;strong&gt;periodic tasks&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#terminate-a-web-worker" class="anchor"&gt;
  &lt;/a&gt;
  Terminate a Web Worker
&lt;/h2&gt;

&lt;p&gt;When a web worker object is created, it will continue to listen for messages (even after the external script is finished) until it is terminated.&lt;/p&gt;

&lt;p&gt;To terminate a web worker, and free browser/computer resources, use the &lt;code&gt;terminate()&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    w.terminate();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#handling-errors" class="anchor"&gt;
  &lt;/a&gt;
  Handling Errors
&lt;/h2&gt;



&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    worker.onerror = function (event) {
          console.log(event.message, event);
    };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reuse-the-web-worker" class="anchor"&gt;
  &lt;/a&gt;
  Reuse the Web Worker
&lt;/h2&gt;

&lt;p&gt;If you set the worker variable to undefined after it has been terminated, you can reuse the code:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;w = undefined;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Full example: &lt;a href="https://auth0.com/blog/speedy-introduction-to-web-workers/"&gt;https://auth0.com/blog/speedy-introduction-to-web-workers/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#spawning-subworkers" class="anchor"&gt;
  &lt;/a&gt;
  Spawning subworkers
&lt;/h2&gt;

&lt;p&gt;Workers may spawn more then one worker if they wish. These are called subworkers. These subworkers must be hosted within the same origin as the parent page. Also, the URLs for subworkers should be relative to the parent worker‚Äôs location rather than that of the owning HTML page. This makes it easier for workers to keep track of where their dependencies are.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-multiple-js-files" class="anchor"&gt;
  &lt;/a&gt;
  Using multiple JS files
&lt;/h2&gt;

&lt;p&gt;If the application needs to use multiple JavaScript files, we can import them using a global function, &lt;strong&gt;importScripts()&lt;/strong&gt; method which takes file name(s) as argument separated by a comma as follows ‚àí&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    importScripts("script1.js", "script2.js");
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;The browser loads each listed script and executes it. Any global objects from each script may then be used by the worker. If the script can‚Äôt be loaded, NETWORK_ERROR is thrown, and subsequent code will fail.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This demo uses a worker script (script1.js), which imports another simple script using importScript that defines a variable, a.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;!-- script in index.html --&amp;gt;
    var worker = new Worker("script1.js");

    worker.addEventListener("message", function(e){
        alert("Hello " + e.data);
    });

    worker.postMessage(true);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;1st JS File&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;!-- script1.js --&amp;gt;
    self.addEventListener("message", function(e){
        var a = "World";
        importScripts("script2.js");
        self.postMessage(a);
    });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2nd JS File&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    a = "Hello";
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Even though &lt;em&gt;importScripts&lt;/em&gt; is sync, it imports the variable from 2nd script into the global scope, not the current function scope. The local variable a stays ‚Äúworld‚Äù, instead of being updated to ‚ÄúHello‚Äù.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: In the context of a worker, both &lt;em&gt;self&lt;/em&gt; and &lt;em&gt;this&lt;/em&gt; reference the global scope for the worker.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#web-workers-and-the-dom" class="anchor"&gt;
  &lt;/a&gt;
  Web Workers and the DOM
&lt;/h2&gt;

&lt;p&gt;Since web workers are in external files, they do not have access to the following JavaScript objects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The DOM object (as it‚Äôs not thread-safe)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can‚Äôt directly manipulate the DOM from inside a worker.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The window object&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;workers run in another global context that is different from the current &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window"&gt;window&lt;/a&gt;. Thus, using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window"&gt;window&lt;/a&gt; shortcut to get the current global scope (instead of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/self"&gt;self&lt;/a&gt;) within a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker"&gt;Worker&lt;/a&gt; will return an error.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The parent object&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In addition to the standard JavaScript set of functions (such as String, Array, Object, JSON, etc), there are a variety of functions available from the DOM to workers. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers"&gt;This article&lt;/a&gt; provides a list of those.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#not-sure-when-to-use-web-workers-the-most-common-tasks-include-spell-checking-syntax-highlighting-prefetching-and-caching-data" class="anchor"&gt;
  &lt;/a&gt;
  Not sure when to use web workers? The most common tasks include spell checking, syntax highlighting, prefetching and caching data.
&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#spawning-a-shared-worker" class="anchor"&gt;
  &lt;/a&gt;
  Spawning a shared worker
&lt;/h2&gt;

&lt;p&gt;Spawning a new shared worker is pretty much the same as with a dedicated worker, but with a different constructor name. It uses &lt;code&gt;SharedWorker&lt;/code&gt; object.&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var myWorker = new SharedWorker('worker.js');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One big difference is that with a shared worker we have to communicate via a &lt;code&gt;port&lt;/code&gt; object . An explicit port is opened which the scripts can use to communicate with the worker . The port connection needs to be started either implicitly by use of the &lt;code&gt;onmessage&lt;/code&gt; event handler or explicitly with the &lt;code&gt;start()&lt;/code&gt; method before any messages can be posted.&lt;/p&gt;

&lt;p&gt;Calling &lt;code&gt;start()&lt;/code&gt; is only needed if the message event is wired up via the &lt;code&gt;addEventListener()&lt;/code&gt; method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sending-messages-to-and-from-a-shared-worker" class="anchor"&gt;
  &lt;/a&gt;
  Sending messages to and from a shared worker
&lt;/h3&gt;

&lt;p&gt;Now messages can be sent to the worker as before, but the &lt;code&gt;postMessage()&lt;/code&gt; the method has to be invoked through the port object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    var eventTrigger1 = document.querySelector(‚Äò#event1‚Äô);

    var eventTrigger2 = document.querySelector(‚Äò#event2‚Äô);

    if (!!window.SharedWorker) {
     var myWorker = new SharedWorker(‚Äúworker.js‚Äù);

    eventTrigger1.onchange = function() {
        myWorker.port.postMessage(eventTrigger1.value);
        console.log(‚ÄòMessage posted to worker‚Äô);
     }

    myWorker.port.onmessage = function(e) {
     eventTrigger2.textContent = e.data;
     console.log(‚ÄòMessage received from worker‚Äô);
     }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Now, on to the worker, it is a bit more complex here as well in &lt;a href="https://github.com/mdn/simple-shared-worker/blob/gh-pages/worker.js"&gt;worker.js&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;We use the ports attribute of this event object to grab the port and store it in a variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;onconnect = function(e) {
      var port = e.ports[0];

      port.onmessage = function(e) {
        var workerResult = 'Result: ' + (e.data[0] * e.data[1]);
        port.postMessage(workerResult);
      }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#transferring-data" class="anchor"&gt;
  &lt;/a&gt;
  Transferring data
&lt;/h2&gt;

&lt;p&gt;Data passed between the main page and workers is &lt;strong&gt;copied&lt;/strong&gt;, not shared. Objects are serialized as they‚Äôre handed to the worker, and subsequently, de-serialized on the other end. The page and worker &lt;strong&gt;do not share the same instance&lt;/strong&gt;, so the end result is that &lt;strong&gt;a duplicate&lt;/strong&gt; is created on each end. Most browsers implement this feature as &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/The_structured_clone_algorithm"&gt;structured cloning&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; know more at &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers"&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#transferrable-objects" class="anchor"&gt;
  &lt;/a&gt;
  Transferrable objects
&lt;/h2&gt;

&lt;p&gt;With Transferable Objects, data is transferred from one context to another with zero-copy, which vastly improves the performance of sending data to a Worker. For example, while transferring an ArrayBuffer from the main app to the worker, the original ArrayBuffer is cleared and no longer usable. Its contents are transferred to the worker context.&lt;/p&gt;

&lt;p&gt;Know more at &lt;a href="https://www.html5rocks.com/en/tutorials/workers/basics/"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-advanced-topics" class="anchor"&gt;
  &lt;/a&gt;
  More Advanced Topics:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;sub workers:&lt;/strong&gt; Workers have the ability to spawn child workers. This is great for further breaking up large tasks at runtime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inline workers:&lt;/strong&gt; With Blob(), you can "inline" your worker in the same HTML file as your main logic by creating a URL handle to the worker code as a string:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thread safety:&lt;/strong&gt; Since web workers have carefully controlled communication points with other threads, it significantly decreases the chance of concurrency problems. There‚Äôs no access to non-thread-safe components or the DOM. And you have to pass specific data in and out of a thread through serialized objects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restrictions with local Access:&lt;/strong&gt; Due to Google Chrome‚Äôs security restrictions, workers will not run locally (e.g. from file://) in the latest versions of the browser. So to run the app from the &lt;code&gt;file://&lt;/code&gt; , we need to run Chrome with the &lt;code&gt;--allow-file-access-from-files&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Same Origin Considerations:&lt;/strong&gt; We cannot load a script from a data: URL or javascript: URL, and an https: page cannot start worker scripts that begin with &lt;code&gt;http:&lt;/code&gt; URLs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-cases" class="anchor"&gt;
  &lt;/a&gt;
  Use Cases
&lt;/h2&gt;

&lt;p&gt;Although the concept might not sound very interesting to most of the people, it‚Äôs very useful to understand the concepts of web workers. Here are a few use cases where web workers will work like a charm&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Code syntax highlighting or another real-time text formatting&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spell checker&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Background I/O or polling of web services&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Image filtering in &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updating many rows of a local web database&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://html.spec.whatwg.org/multipage/workers.html"&gt;https://html.spec.whatwg.org/multipage/workers.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://auth0.com/blog/speedy-introduction-to-web-workers/"&gt;https://auth0.com/blog/speedy-introduction-to-web-workers/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.html5rocks.com/en/tutorials/workers/basics/"&gt;https://www.html5rocks.com/en/tutorials/workers/basics/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers"&gt;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://pagedemos.com/importscript/"&gt;http://pagedemos.com/importscript/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>html</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>100 Days of CSS Illustrations (11-20)</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 24 Aug 2020 13:07:32 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/100-days-of-css-illustrations-11-20-15m7</link>
      <guid>https://dev.to/alvaromontoro/100-days-of-css-illustrations-11-20-15m7</guid>
      <description>&lt;p&gt;The second batch of the 100 days of CSS Illustrations. Days 14-16 were especially tough because I was flooded with work and barely had time to do anything (and it shows :S)... but I'm glad I was able to keep the one illustration per day rate.&lt;/p&gt;

&lt;p&gt;Here are the 10 illustrations/drawings I did in the past 10 days. &lt;strong&gt;Click on the image to see the full illustration with the code&lt;/strong&gt;, and &lt;a href="https://codepen.io/collection/AOaOdx"&gt;click here to see a CodePen collection with all of the drawings plus some variations&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-11-coding-master" class="anchor"&gt;
  &lt;/a&gt;
  Day 11: Coding master
&lt;/h2&gt;

&lt;p&gt;This cartoon was done from scratch. A little tongue-in-cheek, the code in the background is the same as the drawing, so the character is coding itself. It uses CSS variables, so it can be easily customizable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/alvaromontoro/full/WNwwoyY"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lEHyP0aJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vpdg64x1tin5vf499vy1.png" alt="Girld coding on a laptop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-12-loveamor" class="anchor"&gt;
  &lt;/a&gt;
  Day 12: Love/Amor
&lt;/h2&gt;

&lt;p&gt;I like the cubist/minimalist animations by &lt;a href="https://dribbble.com/dennishoogstad"&gt;Dennis Hoogstad&lt;/a&gt;. And I did a version of &lt;a href="https://dribbble.com/shots/8975247-Love"&gt;Love&lt;/a&gt; that transforms to the word Amor on hover (without the animation.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/alvaromontoro/full/poyyePW"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sAIWp--M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w0v79arj8dn2isic3mfz.png" alt="Illustration that forms the word Love"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-13-manga-character" class="anchor"&gt;
  &lt;/a&gt;
  Day 13: Manga character
&lt;/h2&gt;

&lt;p&gt;Another cartoon from scratch. I like it although I'm not a big fan of how the hair ended up looking. This manga character can also be customized via CSS variables (see code line 42).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/alvaromontoro/full/BaKKVQm"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8QjuNQV5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s91exceo1mczfpw2wwi6.png" alt="Manga character"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-14-floating-tower" class="anchor"&gt;
  &lt;/a&gt;
  Day 14: Floating tower
&lt;/h2&gt;

&lt;p&gt;I need to learn a lot about perspective and shadows. What is interesting about this 3D-looking castle it that it was developed with a &lt;strong&gt;single HTML element&lt;/strong&gt; and using clip-paths and box-shadows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/alvaromontoro/full/jOqrYvm"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wgzh8Bul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/da7q1ymhf5e7rktlys7m.png" alt="Illustration of a floating castle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-15-fuzzy-monster-holding-a-sign" class="anchor"&gt;
  &lt;/a&gt;
  Day 15: Fuzzy monster holding a sign
&lt;/h2&gt;

&lt;p&gt;This is inspired by &lt;a href="https://dribbble.com/shots/13987778-Furry-thing-holding-a-sign"&gt;my own design on Dribbble&lt;/a&gt; and it is part of the same series as &lt;a href="https://codepen.io/alvaromontoro/full/XWdbmRB"&gt;another cartoon in this challenge&lt;/a&gt; (actually I reused some parts and cheated by using SVG for filters).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/alvaromontoro/full/RwaGLvo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JW2fI4kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1uwi2lvvuwdhtrlzzuef.png" alt="Cartoon with a Fuzzy monster holding a sign"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-16-wiener-dog" class="anchor"&gt;
  &lt;/a&gt;
  Day 16: Wiener dog
&lt;/h2&gt;

&lt;p&gt;This cartoon was inspired by &lt;a href="https://sites.google.com/a/clipartonline.net/cartoon-dog-pictures/_/rsrc/1476987486035/dachshund-puppy/Dachshund%2021.png"&gt;this cartoon found online&lt;/a&gt; (I don't know the author to credit :S)... although my version took a Simpsonesque turn.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/alvaromontoro/full/NWNRGZQ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P0RhBQb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rydgo67p5vujql7jkne4.png" alt="Cartoon of a wiener dog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-17-jaen-spain" class="anchor"&gt;
  &lt;/a&gt;
  Day 17: Jaen, Spain
&lt;/h2&gt;

&lt;p&gt;This is an illustration of Saint Catherine's castle in &lt;a href="http://www.jaenparaisointerior.es/index.html?__locale=EN"&gt;Jaen, Spain&lt;/a&gt;, the city where I grew up. To draw (especially the tree area) I used &lt;code&gt;clip-path&lt;/code&gt; and the &lt;code&gt;drop-shadow&lt;/code&gt; filter, so it may not be visible in all browsers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/alvaromontoro/full/RwaoomR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8D8m1vgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tox2x48rehfh2vaom095.png" alt="Illustration of the castle in Jaen, Spain"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-18-surprised-pikachu-meme" class="anchor"&gt;
  &lt;/a&gt;
  Day 18: Surprised Pikachu meme
&lt;/h2&gt;

&lt;p&gt;A version of the popular Surprised Pikachu meme done with HTML and CSS. The quotes change every 7 seconds, and some of them should probably be Unsettled Tom instead... -5 points for the wrong meme use!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/alvaromontoro/full/BaKQEoq"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JYU98y-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6nn1ooji2k4j5bkom8tb.png" alt="Cartoon showing Pikachu, one of the main characters of the TV show Pokemon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-19-giraffe" class="anchor"&gt;
  &lt;/a&gt;
  Day 19: Giraffe
&lt;/h2&gt;

&lt;p&gt;This cartoon of a giraffe is based on a different one I made for my daughter around 5 years ago.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/alvaromontoro/full/JjXEXEB"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--epCWyuKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mpxfu4yp4wy22lyfbw2z.png" alt="Giraffe cartoon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-20-3d-landscape" class="anchor"&gt;
  &lt;/a&gt;
  Day 20: 3D Landscape
&lt;/h2&gt;

&lt;p&gt;Based on &lt;a href="https://dribbble.com/shots/7981891-Landscape"&gt;Landscape&lt;/a&gt; by &lt;a href="https://dribbble.com/parhawm"&gt;Parham Marandi&lt;/a&gt; on Dribbble. It uses 3D transformations, and it is slightly interactive: you can move the mouse around the screen to see the landscape rotate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/alvaromontoro/full/vYGgZmK"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bJy_h1I9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j99ag327w6vlw9lgsb3o.png" alt="Cartoon showing a landscape with layers of trees"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-a-little-extra" class="anchor"&gt;
  &lt;/a&gt;
  ...and a little extra
&lt;/h2&gt;

&lt;p&gt;Yesterday, I had a little time to be silly before going to sleep, and I drew an &lt;a href="https://codepen.io/alvaromontoro/full/ZEWLvLY"&gt;owl with HTML and CSS using the word "owl" as the base&lt;/a&gt; to draw from. You can see the process on this video:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kaI-ZdxNIkQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>css</category>
      <category>art</category>
      <category>html</category>
      <category>showdev</category>
    </item>
  </channel>
</rss>
